// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/laex/cg2d/model/ScreenModel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "com/laex/cg2d/model/ScreenModel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace laex {
namespace cg2d {
namespace model {

namespace {

const ::google::protobuf::Descriptor* CGScreenModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGScreenModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGJoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGJoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDistanceJointDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDistanceJointDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRevoluteJointDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRevoluteJointDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPrismaticJointDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPrismaticJointDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPulleyJointDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPulleyJointDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFrictionJointDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFrictionJointDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGWeldJointDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGWeldJointDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGResourceFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGResourceFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEntitySpritesheetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEntitySpritesheetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEntityAnimation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEntityAnimation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBounds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBounds_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBodyDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBodyDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFixtureDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFixtureDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGScreenPreferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGScreenPreferences_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGScreenPreferences_CGDebugDrawPreferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGScreenPreferences_CGDebugDrawPreferences_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGScreenPreferences_CGWorldPreferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGScreenPreferences_CGWorldPreferences_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGScreenPreferences_CGCardPreferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGScreenPreferences_CGCardPreferences_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CGJointType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CGEntityCollisionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CGBodyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CGEditorShapeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto() {
  protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "com/laex/cg2d/model/ScreenModel.proto");
  GOOGLE_CHECK(file != NULL);
  CGScreenModel_descriptor_ = file->message_type(0);
  static const int CGScreenModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenModel, screenprefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenModel, layers_),
  };
  CGScreenModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGScreenModel_descriptor_,
      CGScreenModel::default_instance_,
      CGScreenModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGScreenModel));
  CGJoint_descriptor_ = file->message_type(1);
  static const int CGJoint_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, sourceshapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, targetshapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, distancejointdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, revolutejointdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, prismaticjointdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, pulleyjointdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, frictionjointdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, weldjointdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, localanchora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, localanchorb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, uselocalanchors_),
  };
  CGJoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGJoint_descriptor_,
      CGJoint::default_instance_,
      CGJoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGJoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGJoint));
  CGDistanceJointDef_descriptor_ = file->message_type(2);
  static const int CGDistanceJointDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDistanceJointDef, collideconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDistanceJointDef, freqencyhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDistanceJointDef, dampingratio_),
  };
  CGDistanceJointDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDistanceJointDef_descriptor_,
      CGDistanceJointDef::default_instance_,
      CGDistanceJointDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDistanceJointDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDistanceJointDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDistanceJointDef));
  CGRevoluteJointDef_descriptor_ = file->message_type(3);
  static const int CGRevoluteJointDef_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, collideconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, referenceangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, enablelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, lowerangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, upperangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, enablemotor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, motorspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, maxmotortorque_),
  };
  CGRevoluteJointDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRevoluteJointDef_descriptor_,
      CGRevoluteJointDef::default_instance_,
      CGRevoluteJointDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRevoluteJointDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRevoluteJointDef));
  CGPrismaticJointDef_descriptor_ = file->message_type(4);
  static const int CGPrismaticJointDef_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, collideconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, referenceangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, enablelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, lowertranslation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, uppertranslation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, enablemotor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, maxmotorforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, motorspeed_),
  };
  CGPrismaticJointDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPrismaticJointDef_descriptor_,
      CGPrismaticJointDef::default_instance_,
      CGPrismaticJointDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPrismaticJointDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPrismaticJointDef));
  CGPulleyJointDef_descriptor_ = file->message_type(5);
  static const int CGPulleyJointDef_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPulleyJointDef, collideconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPulleyJointDef, groundanchora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPulleyJointDef, groundanchorb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPulleyJointDef, ratio_),
  };
  CGPulleyJointDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPulleyJointDef_descriptor_,
      CGPulleyJointDef::default_instance_,
      CGPulleyJointDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPulleyJointDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPulleyJointDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPulleyJointDef));
  CGFrictionJointDef_descriptor_ = file->message_type(6);
  static const int CGFrictionJointDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFrictionJointDef, collideconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFrictionJointDef, maxforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFrictionJointDef, maxtorque_),
  };
  CGFrictionJointDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFrictionJointDef_descriptor_,
      CGFrictionJointDef::default_instance_,
      CGFrictionJointDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFrictionJointDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFrictionJointDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFrictionJointDef));
  CGWeldJointDef_descriptor_ = file->message_type(7);
  static const int CGWeldJointDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWeldJointDef, collideconnected_),
  };
  CGWeldJointDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGWeldJointDef_descriptor_,
      CGWeldJointDef::default_instance_,
      CGWeldJointDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWeldJointDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWeldJointDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGWeldJointDef));
  CGResourceFile_descriptor_ = file->message_type(8);
  static const int CGResourceFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResourceFile, resourcefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResourceFile, resourcefileabsolute_),
  };
  CGResourceFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGResourceFile_descriptor_,
      CGResourceFile::default_instance_,
      CGResourceFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResourceFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResourceFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGResourceFile));
  CGEntitySpritesheetItem_descriptor_ = file->message_type(9);
  static const int CGEntitySpritesheetItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntitySpritesheetItem, extractbounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntitySpritesheetItem, frameindex_),
  };
  CGEntitySpritesheetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEntitySpritesheetItem_descriptor_,
      CGEntitySpritesheetItem::default_instance_,
      CGEntitySpritesheetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntitySpritesheetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntitySpritesheetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEntitySpritesheetItem));
  CGEntityAnimation_descriptor_ = file->message_type(10);
  static const int CGEntityAnimation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, animationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, animationduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, defaultanimation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, collisiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, spritesheetfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, spritesheetjsonfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, fixturefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, spritesheetitems_),
  };
  CGEntityAnimation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEntityAnimation_descriptor_,
      CGEntityAnimation::default_instance_,
      CGEntityAnimation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntityAnimation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEntityAnimation));
  CGEntity_descriptor_ = file->message_type(11);
  static const int CGEntity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntity, animations_),
  };
  CGEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEntity_descriptor_,
      CGEntity::default_instance_,
      CGEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEntity));
  CGBounds_descriptor_ = file->message_type(12);
  static const int CGBounds_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBounds, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBounds, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBounds, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBounds, height_),
  };
  CGBounds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBounds_descriptor_,
      CGBounds::default_instance_,
      CGBounds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBounds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBounds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBounds));
  CGVector2_descriptor_ = file->message_type(13);
  static const int CGVector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVector2, y_),
  };
  CGVector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGVector2_descriptor_,
      CGVector2::default_instance_,
      CGVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGVector2));
  CGColor_descriptor_ = file->message_type(14);
  static const int CGColor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGColor, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGColor, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGColor, b_),
  };
  CGColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGColor_descriptor_,
      CGColor::default_instance_,
      CGColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGColor));
  CGBodyDef_descriptor_ = file->message_type(15);
  static const int CGBodyDef_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, allowsleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, angulardamping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, angularvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, awake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, bullet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, fixedrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, intertialscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, lineardamping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, gravityscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, linearvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, position_),
  };
  CGBodyDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBodyDef_descriptor_,
      CGBodyDef::default_instance_,
      CGBodyDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBodyDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBodyDef));
  CGFilter_descriptor_ = file->message_type(16);
  static const int CGFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFilter, categorybits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFilter, maskbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFilter, groupindex_),
  };
  CGFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFilter_descriptor_,
      CGFilter::default_instance_,
      CGFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFilter));
  CGFixtureDef_descriptor_ = file->message_type(17);
  static const int CGFixtureDef_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, friction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, restitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, filter_),
  };
  CGFixtureDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFixtureDef_descriptor_,
      CGFixtureDef::default_instance_,
      CGFixtureDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFixtureDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFixtureDef));
  CGShape_descriptor_ = file->message_type(18);
  static const int CGShape_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, backgroundresourcefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, editorshapetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, bodydef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, fixturedef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, entityreffile_),
  };
  CGShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGShape_descriptor_,
      CGShape::default_instance_,
      CGShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGShape));
  CGLayer_descriptor_ = file->message_type(19);
  static const int CGLayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, shape_),
  };
  CGLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLayer_descriptor_,
      CGLayer::default_instance_,
      CGLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLayer));
  CGScreenPreferences_descriptor_ = file->message_type(20);
  static const int CGScreenPreferences_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences, debugdrawprefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences, worldprefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences, cardprefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences, backgroundcolor_),
  };
  CGScreenPreferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGScreenPreferences_descriptor_,
      CGScreenPreferences::default_instance_,
      CGScreenPreferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGScreenPreferences));
  CGScreenPreferences_CGDebugDrawPreferences_descriptor_ = CGScreenPreferences_descriptor_->nested_type(0);
  static const int CGScreenPreferences_CGDebugDrawPreferences_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, drawbodies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, drawjoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, drawaabb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, drawinactivebodies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, installmousejoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, drawdebugdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, drawentities_),
  };
  CGScreenPreferences_CGDebugDrawPreferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGScreenPreferences_CGDebugDrawPreferences_descriptor_,
      CGScreenPreferences_CGDebugDrawPreferences::default_instance_,
      CGScreenPreferences_CGDebugDrawPreferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGDebugDrawPreferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGScreenPreferences_CGDebugDrawPreferences));
  CGScreenPreferences_CGWorldPreferences_descriptor_ = CGScreenPreferences_descriptor_->nested_type(1);
  static const int CGScreenPreferences_CGWorldPreferences_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, ptmratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, velocityiterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, positioniterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, timestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, gravityx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, gravityy_),
  };
  CGScreenPreferences_CGWorldPreferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGScreenPreferences_CGWorldPreferences_descriptor_,
      CGScreenPreferences_CGWorldPreferences::default_instance_,
      CGScreenPreferences_CGWorldPreferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGWorldPreferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGScreenPreferences_CGWorldPreferences));
  CGScreenPreferences_CGCardPreferences_descriptor_ = CGScreenPreferences_descriptor_->nested_type(2);
  static const int CGScreenPreferences_CGCardPreferences_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGCardPreferences, cardnox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGCardPreferences, cardnoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGCardPreferences, cardwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGCardPreferences, cardheight_),
  };
  CGScreenPreferences_CGCardPreferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGScreenPreferences_CGCardPreferences_descriptor_,
      CGScreenPreferences_CGCardPreferences::default_instance_,
      CGScreenPreferences_CGCardPreferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGCardPreferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGScreenPreferences_CGCardPreferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGScreenPreferences_CGCardPreferences));
  CGJointType_descriptor_ = file->enum_type(0);
  CGEntityCollisionType_descriptor_ = file->enum_type(1);
  CGBodyType_descriptor_ = file->enum_type(2);
  CGEditorShapeType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGScreenModel_descriptor_, &CGScreenModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGJoint_descriptor_, &CGJoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDistanceJointDef_descriptor_, &CGDistanceJointDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRevoluteJointDef_descriptor_, &CGRevoluteJointDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPrismaticJointDef_descriptor_, &CGPrismaticJointDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPulleyJointDef_descriptor_, &CGPulleyJointDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFrictionJointDef_descriptor_, &CGFrictionJointDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGWeldJointDef_descriptor_, &CGWeldJointDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGResourceFile_descriptor_, &CGResourceFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEntitySpritesheetItem_descriptor_, &CGEntitySpritesheetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEntityAnimation_descriptor_, &CGEntityAnimation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEntity_descriptor_, &CGEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBounds_descriptor_, &CGBounds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGVector2_descriptor_, &CGVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGColor_descriptor_, &CGColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBodyDef_descriptor_, &CGBodyDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFilter_descriptor_, &CGFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFixtureDef_descriptor_, &CGFixtureDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGShape_descriptor_, &CGShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLayer_descriptor_, &CGLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGScreenPreferences_descriptor_, &CGScreenPreferences::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGScreenPreferences_CGDebugDrawPreferences_descriptor_, &CGScreenPreferences_CGDebugDrawPreferences::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGScreenPreferences_CGWorldPreferences_descriptor_, &CGScreenPreferences_CGWorldPreferences::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGScreenPreferences_CGCardPreferences_descriptor_, &CGScreenPreferences_CGCardPreferences::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto() {
  delete CGScreenModel::default_instance_;
  delete CGScreenModel_reflection_;
  delete CGJoint::default_instance_;
  delete CGJoint_reflection_;
  delete CGDistanceJointDef::default_instance_;
  delete CGDistanceJointDef_reflection_;
  delete CGRevoluteJointDef::default_instance_;
  delete CGRevoluteJointDef_reflection_;
  delete CGPrismaticJointDef::default_instance_;
  delete CGPrismaticJointDef_reflection_;
  delete CGPulleyJointDef::default_instance_;
  delete CGPulleyJointDef_reflection_;
  delete CGFrictionJointDef::default_instance_;
  delete CGFrictionJointDef_reflection_;
  delete CGWeldJointDef::default_instance_;
  delete CGWeldJointDef_reflection_;
  delete CGResourceFile::default_instance_;
  delete CGResourceFile_reflection_;
  delete CGEntitySpritesheetItem::default_instance_;
  delete CGEntitySpritesheetItem_reflection_;
  delete CGEntityAnimation::default_instance_;
  delete CGEntityAnimation_reflection_;
  delete CGEntity::default_instance_;
  delete CGEntity_reflection_;
  delete CGBounds::default_instance_;
  delete CGBounds_reflection_;
  delete CGVector2::default_instance_;
  delete CGVector2_reflection_;
  delete CGColor::default_instance_;
  delete CGColor_reflection_;
  delete CGBodyDef::default_instance_;
  delete CGBodyDef_reflection_;
  delete CGFilter::default_instance_;
  delete CGFilter_reflection_;
  delete CGFixtureDef::default_instance_;
  delete CGFixtureDef_reflection_;
  delete CGShape::default_instance_;
  delete CGShape_reflection_;
  delete CGLayer::default_instance_;
  delete CGLayer_reflection_;
  delete CGScreenPreferences::default_instance_;
  delete CGScreenPreferences_reflection_;
  delete CGScreenPreferences_CGDebugDrawPreferences::default_instance_;
  delete CGScreenPreferences_CGDebugDrawPreferences_reflection_;
  delete CGScreenPreferences_CGWorldPreferences::default_instance_;
  delete CGScreenPreferences_CGWorldPreferences_reflection_;
  delete CGScreenPreferences_CGCardPreferences::default_instance_;
  delete CGScreenPreferences_CGCardPreferences_reflection_;
}

void protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%com/laex/cg2d/model/ScreenModel.proto\022"
    "\023com.laex.cg2d.model\"|\n\rCGScreenModel\022=\n"
    "\013screenPrefs\030\001 \001(\0132(.com.laex.cg2d.model"
    ".CGScreenPreferences\022,\n\006layers\030\002 \003(\0132\034.c"
    "om.laex.cg2d.model.CGLayer\"\364\004\n\007CGJoint\022\025"
    "\n\rsourceShapeId\030\001 \001(\t\022\025\n\rtargetShapeId\030\002"
    " \001(\t\022.\n\004type\030\003 \001(\0162 .com.laex.cg2d.model"
    ".CGJointType\022A\n\020distanceJointDef\030\005 \001(\0132\'"
    ".com.laex.cg2d.model.CGDistanceJointDef\022"
    "A\n\020revoluteJointDef\030\006 \001(\0132\'.com.laex.cg2"
    "d.model.CGRevoluteJointDef\022C\n\021prismaticJ"
    "ointDef\030\007 \001(\0132(.com.laex.cg2d.model.CGPr"
    "ismaticJointDef\022=\n\016pulleyJointDef\030\010 \001(\0132"
    "%.com.laex.cg2d.model.CGPulleyJointDef\022A"
    "\n\020frictionJointDef\030\t \001(\0132\'.com.laex.cg2d"
    ".model.CGFrictionJointDef\0229\n\014weldJointDe"
    "f\030\n \001(\0132#.com.laex.cg2d.model.CGWeldJoin"
    "tDef\0224\n\014localAnchorA\030\013 \001(\0132\036.com.laex.cg"
    "2d.model.CGVector2\0224\n\014localAnchorB\030\014 \001(\013"
    "2\036.com.laex.cg2d.model.CGVector2\022\027\n\017useL"
    "ocalAnchors\030\r \001(\010\"X\n\022CGDistanceJointDef\022"
    "\030\n\020collideConnected\030\001 \001(\010\022\022\n\nfreqencyHz\030"
    "\002 \001(\002\022\024\n\014dampingRatio\030\003 \001(\002\"\304\001\n\022CGRevolu"
    "teJointDef\022\030\n\020collideConnected\030\001 \001(\010\022\026\n\016"
    "referenceAngle\030\002 \001(\002\022\023\n\013enableLimit\030\003 \001("
    "\010\022\022\n\nlowerAngle\030\004 \001(\002\022\022\n\nupperAngle\030\005 \001("
    "\002\022\023\n\013enableMotor\030\006 \001(\010\022\022\n\nmotorSpeed\030\007 \001"
    "(\002\022\026\n\016maxMotorTorque\030\010 \001(\002\"\256\002\n\023CGPrismat"
    "icJointDef\022\030\n\020collideConnected\030\001 \001(\010\022.\n\006"
    "anchor\030\002 \001(\0132\036.com.laex.cg2d.model.CGVec"
    "tor2\022,\n\004axis\030\003 \001(\0132\036.com.laex.cg2d.model"
    ".CGVector2\022\026\n\016referenceAngle\030\005 \001(\002\022\023\n\013en"
    "ableLimit\030\006 \001(\010\022\030\n\020lowerTranslation\030\007 \001("
    "\002\022\030\n\020upperTranslation\030\010 \001(\002\022\023\n\013enableMot"
    "or\030\t \001(\010\022\025\n\rmaxMotorForce\030\n \001(\002\022\022\n\nmotor"
    "Speed\030\013 \001(\002\"\251\001\n\020CGPulleyJointDef\022\030\n\020coll"
    "ideConnected\030\001 \001(\010\0225\n\rgroundAnchorA\030\002 \001("
    "\0132\036.com.laex.cg2d.model.CGVector2\0225\n\rgro"
    "undAnchorB\030\003 \001(\0132\036.com.laex.cg2d.model.C"
    "GVector2\022\r\n\005ratio\030\004 \001(\002\"S\n\022CGFrictionJoi"
    "ntDef\022\030\n\020collideConnected\030\001 \001(\010\022\020\n\010maxFo"
    "rce\030\002 \001(\002\022\021\n\tmaxTorque\030\003 \001(\002\"*\n\016CGWeldJo"
    "intDef\022\030\n\020collideConnected\030\001 \001(\010\"D\n\016CGRe"
    "sourceFile\022\024\n\014resourceFile\030\001 \001(\t\022\034\n\024reso"
    "urceFileAbsolute\030\002 \001(\t\"c\n\027CGEntitySprite"
    "sheetItem\0224\n\rextractBounds\030\001 \001(\0132\035.com.l"
    "aex.cg2d.model.CGBounds\022\022\n\nframeIndex\030\002 "
    "\001(\005\"\326\003\n\021CGEntityAnimation\022\025\n\ranimationNa"
    "me\030\001 \001(\t\022\031\n\021animationDuration\030\002 \001(\002\022\030\n\020d"
    "efaultAnimation\030\003 \001(\010\022A\n\rcollisionType\030\004"
    " \001(\0162*.com.laex.cg2d.model.CGEntityColli"
    "sionType\022<\n\017spritesheetFile\030\005 \001(\0132#.com."
    "laex.cg2d.model.CGResourceFile\022@\n\023sprite"
    "sheetJsonFile\030\006 \001(\0132#.com.laex.cg2d.mode"
    "l.CGResourceFile\0228\n\013fixtureFile\030\007 \001(\0132#."
    "com.laex.cg2d.model.CGResourceFile\0220\n\010ve"
    "rtices\030\010 \003(\0132\036.com.laex.cg2d.model.CGVec"
    "tor2\022F\n\020spritesheetItems\030\t \003(\0132,.com.lae"
    "x.cg2d.model.CGEntitySpritesheetItem\"F\n\010"
    "CGEntity\022:\n\nanimations\030\001 \003(\0132&.com.laex."
    "cg2d.model.CGEntityAnimation\"\?\n\010CGBounds"
    "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n"
    "\006height\030\004 \001(\002\"!\n\tCGVector2\022\t\n\001x\030\001 \002(\002\022\t\n"
    "\001y\030\002 \002(\002\"*\n\007CGColor\022\t\n\001r\030\001 \002(\005\022\t\n\001g\030\002 \002("
    "\005\022\t\n\001b\030\003 \002(\005\"\203\003\n\tCGBodyDef\022\016\n\006active\030\001 \001"
    "(\010\022\022\n\nallowSleep\030\002 \001(\010\022\r\n\005angle\030\003 \001(\002\022\026\n"
    "\016angularDamping\030\004 \001(\002\022\027\n\017angularVelocity"
    "\030\005 \001(\002\022\r\n\005awake\030\006 \001(\010\022\016\n\006bullet\030\007 \001(\010\022\025\n"
    "\rfixedRotation\030\010 \001(\010\022\026\n\016intertialScale\030\t"
    " \001(\002\022\025\n\rlinearDamping\030\n \001(\002\022\024\n\014gravitySc"
    "ale\030\013 \001(\002\0226\n\016linearVelocity\030\014 \001(\0132\036.com."
    "laex.cg2d.model.CGVector2\022-\n\004type\030\r \001(\0162"
    "\037.com.laex.cg2d.model.CGBodyType\0220\n\010posi"
    "tion\030\016 \001(\0132\036.com.laex.cg2d.model.CGVecto"
    "r2\"F\n\010CGFilter\022\024\n\014categoryBits\030\001 \001(\005\022\020\n\010"
    "maskBits\030\002 \001(\005\022\022\n\ngroupIndex\030\003 \001(\005\"\205\001\n\014C"
    "GFixtureDef\022\017\n\007density\030\001 \001(\002\022\020\n\010friction"
    "\030\002 \001(\002\022\023\n\013restitution\030\003 \001(\002\022\016\n\006sensor\030\004 "
    "\001(\010\022-\n\006filter\030\005 \001(\0132\035.com.laex.cg2d.mode"
    "l.CGFilter\"\321\003\n\007CGShape\022\n\n\002id\030\001 \001(\t\022\017\n\007vi"
    "sible\030\002 \001(\010\022\016\n\006locked\030\003 \001(\010\022\022\n\nbackgroun"
    "d\030\004 \001(\010\022C\n\026backgroundResourceFile\030\005 \001(\0132"
    "#.com.laex.cg2d.model.CGResourceFile\022\?\n\017"
    "editorShapeType\030\006 \001(\0162&.com.laex.cg2d.mo"
    "del.CGEditorShapeType\022-\n\006bounds\030\007 \001(\0132\035."
    "com.laex.cg2d.model.CGBounds\022/\n\007bodyDef\030"
    "\010 \001(\0132\036.com.laex.cg2d.model.CGBodyDef\0225\n"
    "\nfixtureDef\030\t \001(\0132!.com.laex.cg2d.model."
    "CGFixtureDef\022,\n\006joints\030\n \003(\0132\034.com.laex."
    "cg2d.model.CGJoint\022:\n\rentityRefFile\030\013 \001("
    "\0132#.com.laex.cg2d.model.CGResourceFile\"q"
    "\n\007CGLayer\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007v"
    "isible\030\003 \001(\010\022\016\n\006locked\030\004 \001(\010\022+\n\005shape\030\005 "
    "\003(\0132\034.com.laex.cg2d.model.CGShape\"\363\005\n\023CG"
    "ScreenPreferences\022W\n\016debugDrawPrefs\030\001 \001("
    "\0132\?.com.laex.cg2d.model.CGScreenPreferen"
    "ces.CGDebugDrawPreferences\022O\n\nworldPrefs"
    "\030\002 \001(\0132;.com.laex.cg2d.model.CGScreenPre"
    "ferences.CGWorldPreferences\022M\n\tcardPrefs"
    "\030\003 \001(\0132:.com.laex.cg2d.model.CGScreenPre"
    "ferences.CGCardPreferences\0225\n\017background"
    "Color\030\004 \001(\0132\034.com.laex.cg2d.model.CGColo"
    "r\032\266\001\n\026CGDebugDrawPreferences\022\022\n\ndrawBodi"
    "es\030\001 \001(\010\022\022\n\ndrawJoints\030\002 \001(\010\022\020\n\010drawAABB"
    "\030\003 \001(\010\022\032\n\022drawInactiveBodies\030\004 \001(\010\022\031\n\021in"
    "stallMouseJoint\030\005 \001(\010\022\025\n\rdrawDebugData\030\006"
    " \001(\010\022\024\n\014drawEntities\030\007 \001(\010\032\224\001\n\022CGWorldPr"
    "eferences\022\020\n\010ptmRatio\030\001 \001(\005\022\032\n\022velocityI"
    "terations\030\002 \001(\005\022\032\n\022positionIterations\030\003 "
    "\001(\005\022\020\n\010timeStep\030\004 \001(\002\022\020\n\010gravityX\030\005 \001(\002\022"
    "\020\n\010gravityY\030\006 \001(\002\032\\\n\021CGCardPreferences\022\017"
    "\n\007cardNoX\030\001 \001(\005\022\017\n\007cardNoY\030\002 \001(\005\022\021\n\tcard"
    "Width\030\003 \001(\005\022\022\n\ncardHeight\030\004 \001(\005*\223\001\n\013CGJo"
    "intType\022\013\n\007UNKNOWN\020\001\022\014\n\010REVOLUTE\020\002\022\r\n\tPR"
    "ISMATIC\020\003\022\014\n\010DISTANCE\020\004\022\n\n\006PULLEY\020\005\022\t\n\005M"
    "OUSE\020\006\022\010\n\004GEAR\020\007\022\t\n\005WHEEL\020\010\022\010\n\004WELD\020\t\022\014\n"
    "\010FRICTION\020\n\022\010\n\004ROPE\020\013*B\n\025CGEntityCollisi"
    "onType\022\010\n\004NONE\020\000\022\007\n\003BOX\020\001\022\n\n\006CIRCLE\020\002\022\n\n"
    "\006CUSTOM\020\003*4\n\nCGBodyType\022\n\n\006STATIC\020\001\022\r\n\tK"
    "INEMATIC\020\002\022\013\n\007DYNAMIC\020\003*\232\001\n\021CGEditorShap"
    "eType\022\027\n\023SIMPLE_SHAPE_CIRCLE\020\001\022\024\n\020SIMPLE"
    "_SHAPE_BOX\020\002\022\026\n\022SIMPLE_SHAPE_HEDGE\020\003\022\026\n\022"
    "SIMPLE_SHAPE_VEDGE\020\004\022\024\n\020BACKGROUND_SHAPE"
    "\020\005\022\020\n\014ENTITY_SHAPE\020\006", 4940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "com/laex/cg2d/model/ScreenModel.proto", &protobuf_RegisterTypes);
  CGScreenModel::default_instance_ = new CGScreenModel();
  CGJoint::default_instance_ = new CGJoint();
  CGDistanceJointDef::default_instance_ = new CGDistanceJointDef();
  CGRevoluteJointDef::default_instance_ = new CGRevoluteJointDef();
  CGPrismaticJointDef::default_instance_ = new CGPrismaticJointDef();
  CGPulleyJointDef::default_instance_ = new CGPulleyJointDef();
  CGFrictionJointDef::default_instance_ = new CGFrictionJointDef();
  CGWeldJointDef::default_instance_ = new CGWeldJointDef();
  CGResourceFile::default_instance_ = new CGResourceFile();
  CGEntitySpritesheetItem::default_instance_ = new CGEntitySpritesheetItem();
  CGEntityAnimation::default_instance_ = new CGEntityAnimation();
  CGEntity::default_instance_ = new CGEntity();
  CGBounds::default_instance_ = new CGBounds();
  CGVector2::default_instance_ = new CGVector2();
  CGColor::default_instance_ = new CGColor();
  CGBodyDef::default_instance_ = new CGBodyDef();
  CGFilter::default_instance_ = new CGFilter();
  CGFixtureDef::default_instance_ = new CGFixtureDef();
  CGShape::default_instance_ = new CGShape();
  CGLayer::default_instance_ = new CGLayer();
  CGScreenPreferences::default_instance_ = new CGScreenPreferences();
  CGScreenPreferences_CGDebugDrawPreferences::default_instance_ = new CGScreenPreferences_CGDebugDrawPreferences();
  CGScreenPreferences_CGWorldPreferences::default_instance_ = new CGScreenPreferences_CGWorldPreferences();
  CGScreenPreferences_CGCardPreferences::default_instance_ = new CGScreenPreferences_CGCardPreferences();
  CGScreenModel::default_instance_->InitAsDefaultInstance();
  CGJoint::default_instance_->InitAsDefaultInstance();
  CGDistanceJointDef::default_instance_->InitAsDefaultInstance();
  CGRevoluteJointDef::default_instance_->InitAsDefaultInstance();
  CGPrismaticJointDef::default_instance_->InitAsDefaultInstance();
  CGPulleyJointDef::default_instance_->InitAsDefaultInstance();
  CGFrictionJointDef::default_instance_->InitAsDefaultInstance();
  CGWeldJointDef::default_instance_->InitAsDefaultInstance();
  CGResourceFile::default_instance_->InitAsDefaultInstance();
  CGEntitySpritesheetItem::default_instance_->InitAsDefaultInstance();
  CGEntityAnimation::default_instance_->InitAsDefaultInstance();
  CGEntity::default_instance_->InitAsDefaultInstance();
  CGBounds::default_instance_->InitAsDefaultInstance();
  CGVector2::default_instance_->InitAsDefaultInstance();
  CGColor::default_instance_->InitAsDefaultInstance();
  CGBodyDef::default_instance_->InitAsDefaultInstance();
  CGFilter::default_instance_->InitAsDefaultInstance();
  CGFixtureDef::default_instance_->InitAsDefaultInstance();
  CGShape::default_instance_->InitAsDefaultInstance();
  CGLayer::default_instance_->InitAsDefaultInstance();
  CGScreenPreferences::default_instance_->InitAsDefaultInstance();
  CGScreenPreferences_CGDebugDrawPreferences::default_instance_->InitAsDefaultInstance();
  CGScreenPreferences_CGWorldPreferences::default_instance_->InitAsDefaultInstance();
  CGScreenPreferences_CGCardPreferences::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto {
  StaticDescriptorInitializer_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto() {
    protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  }
} static_descriptor_initializer_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto_;
const ::google::protobuf::EnumDescriptor* CGJointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGJointType_descriptor_;
}
bool CGJointType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CGEntityCollisionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEntityCollisionType_descriptor_;
}
bool CGEntityCollisionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CGBodyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBodyType_descriptor_;
}
bool CGBodyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CGEditorShapeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEditorShapeType_descriptor_;
}
bool CGEditorShapeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CGScreenModel::kScreenPrefsFieldNumber;
const int CGScreenModel::kLayersFieldNumber;
#endif  // !_MSC_VER

CGScreenModel::CGScreenModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGScreenModel::InitAsDefaultInstance() {
  screenprefs_ = const_cast< ::com::laex::cg2d::model::CGScreenPreferences*>(&::com::laex::cg2d::model::CGScreenPreferences::default_instance());
}

CGScreenModel::CGScreenModel(const CGScreenModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGScreenModel::SharedCtor() {
  _cached_size_ = 0;
  screenprefs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGScreenModel::~CGScreenModel() {
  SharedDtor();
}

void CGScreenModel::SharedDtor() {
  if (this != default_instance_) {
    delete screenprefs_;
  }
}

void CGScreenModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGScreenModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGScreenModel_descriptor_;
}

const CGScreenModel& CGScreenModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGScreenModel* CGScreenModel::default_instance_ = NULL;

CGScreenModel* CGScreenModel::New() const {
  return new CGScreenModel;
}

void CGScreenModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_screenprefs()) {
      if (screenprefs_ != NULL) screenprefs_->::com::laex::cg2d::model::CGScreenPreferences::Clear();
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGScreenModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.laex.cg2d.model.CGScreenPreferences screenPrefs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenprefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .com.laex.cg2d.model.CGLayer layers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGScreenModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.laex.cg2d.model.CGScreenPreferences screenPrefs = 1;
  if (has_screenprefs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->screenprefs(), output);
  }

  // repeated .com.laex.cg2d.model.CGLayer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGScreenModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.laex.cg2d.model.CGScreenPreferences screenPrefs = 1;
  if (has_screenprefs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->screenprefs(), target);
  }

  // repeated .com.laex.cg2d.model.CGLayer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGScreenModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.laex.cg2d.model.CGScreenPreferences screenPrefs = 1;
    if (has_screenprefs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screenprefs());
    }

  }
  // repeated .com.laex.cg2d.model.CGLayer layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGScreenModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGScreenModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGScreenModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGScreenModel::MergeFrom(const CGScreenModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenprefs()) {
      mutable_screenprefs()->::com::laex::cg2d::model::CGScreenPreferences::MergeFrom(from.screenprefs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGScreenModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGScreenModel::CopyFrom(const CGScreenModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScreenModel::IsInitialized() const {

  if (has_screenprefs()) {
    if (!this->screenprefs().IsInitialized()) return false;
  }
  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void CGScreenModel::Swap(CGScreenModel* other) {
  if (other != this) {
    std::swap(screenprefs_, other->screenprefs_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGScreenModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGScreenModel_descriptor_;
  metadata.reflection = CGScreenModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGJoint::kSourceShapeIdFieldNumber;
const int CGJoint::kTargetShapeIdFieldNumber;
const int CGJoint::kTypeFieldNumber;
const int CGJoint::kDistanceJointDefFieldNumber;
const int CGJoint::kRevoluteJointDefFieldNumber;
const int CGJoint::kPrismaticJointDefFieldNumber;
const int CGJoint::kPulleyJointDefFieldNumber;
const int CGJoint::kFrictionJointDefFieldNumber;
const int CGJoint::kWeldJointDefFieldNumber;
const int CGJoint::kLocalAnchorAFieldNumber;
const int CGJoint::kLocalAnchorBFieldNumber;
const int CGJoint::kUseLocalAnchorsFieldNumber;
#endif  // !_MSC_VER

CGJoint::CGJoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGJoint::InitAsDefaultInstance() {
  distancejointdef_ = const_cast< ::com::laex::cg2d::model::CGDistanceJointDef*>(&::com::laex::cg2d::model::CGDistanceJointDef::default_instance());
  revolutejointdef_ = const_cast< ::com::laex::cg2d::model::CGRevoluteJointDef*>(&::com::laex::cg2d::model::CGRevoluteJointDef::default_instance());
  prismaticjointdef_ = const_cast< ::com::laex::cg2d::model::CGPrismaticJointDef*>(&::com::laex::cg2d::model::CGPrismaticJointDef::default_instance());
  pulleyjointdef_ = const_cast< ::com::laex::cg2d::model::CGPulleyJointDef*>(&::com::laex::cg2d::model::CGPulleyJointDef::default_instance());
  frictionjointdef_ = const_cast< ::com::laex::cg2d::model::CGFrictionJointDef*>(&::com::laex::cg2d::model::CGFrictionJointDef::default_instance());
  weldjointdef_ = const_cast< ::com::laex::cg2d::model::CGWeldJointDef*>(&::com::laex::cg2d::model::CGWeldJointDef::default_instance());
  localanchora_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
  localanchorb_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
}

CGJoint::CGJoint(const CGJoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGJoint::SharedCtor() {
  _cached_size_ = 0;
  sourceshapeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetshapeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  distancejointdef_ = NULL;
  revolutejointdef_ = NULL;
  prismaticjointdef_ = NULL;
  pulleyjointdef_ = NULL;
  frictionjointdef_ = NULL;
  weldjointdef_ = NULL;
  localanchora_ = NULL;
  localanchorb_ = NULL;
  uselocalanchors_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGJoint::~CGJoint() {
  SharedDtor();
}

void CGJoint::SharedDtor() {
  if (sourceshapeid_ != &::google::protobuf::internal::kEmptyString) {
    delete sourceshapeid_;
  }
  if (targetshapeid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetshapeid_;
  }
  if (this != default_instance_) {
    delete distancejointdef_;
    delete revolutejointdef_;
    delete prismaticjointdef_;
    delete pulleyjointdef_;
    delete frictionjointdef_;
    delete weldjointdef_;
    delete localanchora_;
    delete localanchorb_;
  }
}

void CGJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGJoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGJoint_descriptor_;
}

const CGJoint& CGJoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGJoint* CGJoint::default_instance_ = NULL;

CGJoint* CGJoint::New() const {
  return new CGJoint;
}

void CGJoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sourceshapeid()) {
      if (sourceshapeid_ != &::google::protobuf::internal::kEmptyString) {
        sourceshapeid_->clear();
      }
    }
    if (has_targetshapeid()) {
      if (targetshapeid_ != &::google::protobuf::internal::kEmptyString) {
        targetshapeid_->clear();
      }
    }
    type_ = 1;
    if (has_distancejointdef()) {
      if (distancejointdef_ != NULL) distancejointdef_->::com::laex::cg2d::model::CGDistanceJointDef::Clear();
    }
    if (has_revolutejointdef()) {
      if (revolutejointdef_ != NULL) revolutejointdef_->::com::laex::cg2d::model::CGRevoluteJointDef::Clear();
    }
    if (has_prismaticjointdef()) {
      if (prismaticjointdef_ != NULL) prismaticjointdef_->::com::laex::cg2d::model::CGPrismaticJointDef::Clear();
    }
    if (has_pulleyjointdef()) {
      if (pulleyjointdef_ != NULL) pulleyjointdef_->::com::laex::cg2d::model::CGPulleyJointDef::Clear();
    }
    if (has_frictionjointdef()) {
      if (frictionjointdef_ != NULL) frictionjointdef_->::com::laex::cg2d::model::CGFrictionJointDef::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_weldjointdef()) {
      if (weldjointdef_ != NULL) weldjointdef_->::com::laex::cg2d::model::CGWeldJointDef::Clear();
    }
    if (has_localanchora()) {
      if (localanchora_ != NULL) localanchora_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    if (has_localanchorb()) {
      if (localanchorb_ != NULL) localanchorb_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    uselocalanchors_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sourceShapeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceshapeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourceshapeid().data(), this->sourceshapeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetShapeId;
        break;
      }

      // optional string targetShapeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetShapeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetshapeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetshapeid().data(), this->targetshapeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .com.laex.cg2d.model.CGJointType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::laex::cg2d::model::CGJointType_IsValid(value)) {
            set_type(static_cast< ::com::laex::cg2d::model::CGJointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_distanceJointDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGDistanceJointDef distanceJointDef = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distanceJointDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distancejointdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_revoluteJointDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGRevoluteJointDef revoluteJointDef = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revoluteJointDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revolutejointdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prismaticJointDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGPrismaticJointDef prismaticJointDef = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prismaticJointDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prismaticjointdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pulleyJointDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGPulleyJointDef pulleyJointDef = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pulleyJointDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pulleyjointdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_frictionJointDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGFrictionJointDef frictionJointDef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frictionJointDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frictionjointdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_weldJointDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGWeldJointDef weldJointDef = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weldJointDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weldjointdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_localAnchorA;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 localAnchorA = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localAnchorA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localanchora()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_localAnchorB;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 localAnchorB = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localAnchorB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localanchorb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_useLocalAnchors;
        break;
      }

      // optional bool useLocalAnchors = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useLocalAnchors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uselocalanchors_)));
          set_has_uselocalanchors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sourceShapeId = 1;
  if (has_sourceshapeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourceshapeid().data(), this->sourceshapeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sourceshapeid(), output);
  }

  // optional string targetShapeId = 2;
  if (has_targetshapeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetshapeid().data(), this->targetshapeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->targetshapeid(), output);
  }

  // optional .com.laex.cg2d.model.CGJointType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .com.laex.cg2d.model.CGDistanceJointDef distanceJointDef = 5;
  if (has_distancejointdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->distancejointdef(), output);
  }

  // optional .com.laex.cg2d.model.CGRevoluteJointDef revoluteJointDef = 6;
  if (has_revolutejointdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->revolutejointdef(), output);
  }

  // optional .com.laex.cg2d.model.CGPrismaticJointDef prismaticJointDef = 7;
  if (has_prismaticjointdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prismaticjointdef(), output);
  }

  // optional .com.laex.cg2d.model.CGPulleyJointDef pulleyJointDef = 8;
  if (has_pulleyjointdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pulleyjointdef(), output);
  }

  // optional .com.laex.cg2d.model.CGFrictionJointDef frictionJointDef = 9;
  if (has_frictionjointdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->frictionjointdef(), output);
  }

  // optional .com.laex.cg2d.model.CGWeldJointDef weldJointDef = 10;
  if (has_weldjointdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->weldjointdef(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 localAnchorA = 11;
  if (has_localanchora()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->localanchora(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 localAnchorB = 12;
  if (has_localanchorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->localanchorb(), output);
  }

  // optional bool useLocalAnchors = 13;
  if (has_uselocalanchors()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->uselocalanchors(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGJoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sourceShapeId = 1;
  if (has_sourceshapeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourceshapeid().data(), this->sourceshapeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourceshapeid(), target);
  }

  // optional string targetShapeId = 2;
  if (has_targetshapeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetshapeid().data(), this->targetshapeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetshapeid(), target);
  }

  // optional .com.laex.cg2d.model.CGJointType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .com.laex.cg2d.model.CGDistanceJointDef distanceJointDef = 5;
  if (has_distancejointdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->distancejointdef(), target);
  }

  // optional .com.laex.cg2d.model.CGRevoluteJointDef revoluteJointDef = 6;
  if (has_revolutejointdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->revolutejointdef(), target);
  }

  // optional .com.laex.cg2d.model.CGPrismaticJointDef prismaticJointDef = 7;
  if (has_prismaticjointdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prismaticjointdef(), target);
  }

  // optional .com.laex.cg2d.model.CGPulleyJointDef pulleyJointDef = 8;
  if (has_pulleyjointdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pulleyjointdef(), target);
  }

  // optional .com.laex.cg2d.model.CGFrictionJointDef frictionJointDef = 9;
  if (has_frictionjointdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->frictionjointdef(), target);
  }

  // optional .com.laex.cg2d.model.CGWeldJointDef weldJointDef = 10;
  if (has_weldjointdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->weldjointdef(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 localAnchorA = 11;
  if (has_localanchora()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->localanchora(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 localAnchorB = 12;
  if (has_localanchorb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->localanchorb(), target);
  }

  // optional bool useLocalAnchors = 13;
  if (has_uselocalanchors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->uselocalanchors(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGJoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sourceShapeId = 1;
    if (has_sourceshapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceshapeid());
    }

    // optional string targetShapeId = 2;
    if (has_targetshapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetshapeid());
    }

    // optional .com.laex.cg2d.model.CGJointType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.laex.cg2d.model.CGDistanceJointDef distanceJointDef = 5;
    if (has_distancejointdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distancejointdef());
    }

    // optional .com.laex.cg2d.model.CGRevoluteJointDef revoluteJointDef = 6;
    if (has_revolutejointdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revolutejointdef());
    }

    // optional .com.laex.cg2d.model.CGPrismaticJointDef prismaticJointDef = 7;
    if (has_prismaticjointdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prismaticjointdef());
    }

    // optional .com.laex.cg2d.model.CGPulleyJointDef pulleyJointDef = 8;
    if (has_pulleyjointdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pulleyjointdef());
    }

    // optional .com.laex.cg2d.model.CGFrictionJointDef frictionJointDef = 9;
    if (has_frictionjointdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frictionjointdef());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.laex.cg2d.model.CGWeldJointDef weldJointDef = 10;
    if (has_weldjointdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weldjointdef());
    }

    // optional .com.laex.cg2d.model.CGVector2 localAnchorA = 11;
    if (has_localanchora()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localanchora());
    }

    // optional .com.laex.cg2d.model.CGVector2 localAnchorB = 12;
    if (has_localanchorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localanchorb());
    }

    // optional bool useLocalAnchors = 13;
    if (has_uselocalanchors()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGJoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGJoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGJoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGJoint::MergeFrom(const CGJoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceshapeid()) {
      set_sourceshapeid(from.sourceshapeid());
    }
    if (from.has_targetshapeid()) {
      set_targetshapeid(from.targetshapeid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_distancejointdef()) {
      mutable_distancejointdef()->::com::laex::cg2d::model::CGDistanceJointDef::MergeFrom(from.distancejointdef());
    }
    if (from.has_revolutejointdef()) {
      mutable_revolutejointdef()->::com::laex::cg2d::model::CGRevoluteJointDef::MergeFrom(from.revolutejointdef());
    }
    if (from.has_prismaticjointdef()) {
      mutable_prismaticjointdef()->::com::laex::cg2d::model::CGPrismaticJointDef::MergeFrom(from.prismaticjointdef());
    }
    if (from.has_pulleyjointdef()) {
      mutable_pulleyjointdef()->::com::laex::cg2d::model::CGPulleyJointDef::MergeFrom(from.pulleyjointdef());
    }
    if (from.has_frictionjointdef()) {
      mutable_frictionjointdef()->::com::laex::cg2d::model::CGFrictionJointDef::MergeFrom(from.frictionjointdef());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weldjointdef()) {
      mutable_weldjointdef()->::com::laex::cg2d::model::CGWeldJointDef::MergeFrom(from.weldjointdef());
    }
    if (from.has_localanchora()) {
      mutable_localanchora()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.localanchora());
    }
    if (from.has_localanchorb()) {
      mutable_localanchorb()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.localanchorb());
    }
    if (from.has_uselocalanchors()) {
      set_uselocalanchors(from.uselocalanchors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGJoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGJoint::CopyFrom(const CGJoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGJoint::IsInitialized() const {

  if (has_prismaticjointdef()) {
    if (!this->prismaticjointdef().IsInitialized()) return false;
  }
  if (has_pulleyjointdef()) {
    if (!this->pulleyjointdef().IsInitialized()) return false;
  }
  if (has_localanchora()) {
    if (!this->localanchora().IsInitialized()) return false;
  }
  if (has_localanchorb()) {
    if (!this->localanchorb().IsInitialized()) return false;
  }
  return true;
}

void CGJoint::Swap(CGJoint* other) {
  if (other != this) {
    std::swap(sourceshapeid_, other->sourceshapeid_);
    std::swap(targetshapeid_, other->targetshapeid_);
    std::swap(type_, other->type_);
    std::swap(distancejointdef_, other->distancejointdef_);
    std::swap(revolutejointdef_, other->revolutejointdef_);
    std::swap(prismaticjointdef_, other->prismaticjointdef_);
    std::swap(pulleyjointdef_, other->pulleyjointdef_);
    std::swap(frictionjointdef_, other->frictionjointdef_);
    std::swap(weldjointdef_, other->weldjointdef_);
    std::swap(localanchora_, other->localanchora_);
    std::swap(localanchorb_, other->localanchorb_);
    std::swap(uselocalanchors_, other->uselocalanchors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGJoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGJoint_descriptor_;
  metadata.reflection = CGJoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDistanceJointDef::kCollideConnectedFieldNumber;
const int CGDistanceJointDef::kFreqencyHzFieldNumber;
const int CGDistanceJointDef::kDampingRatioFieldNumber;
#endif  // !_MSC_VER

CGDistanceJointDef::CGDistanceJointDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGDistanceJointDef::InitAsDefaultInstance() {
}

CGDistanceJointDef::CGDistanceJointDef(const CGDistanceJointDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGDistanceJointDef::SharedCtor() {
  _cached_size_ = 0;
  collideconnected_ = false;
  freqencyhz_ = 0;
  dampingratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDistanceJointDef::~CGDistanceJointDef() {
  SharedDtor();
}

void CGDistanceJointDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDistanceJointDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDistanceJointDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDistanceJointDef_descriptor_;
}

const CGDistanceJointDef& CGDistanceJointDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGDistanceJointDef* CGDistanceJointDef::default_instance_ = NULL;

CGDistanceJointDef* CGDistanceJointDef::New() const {
  return new CGDistanceJointDef;
}

void CGDistanceJointDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collideconnected_ = false;
    freqencyhz_ = 0;
    dampingratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDistanceJointDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collideConnected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_freqencyHz;
        break;
      }

      // optional float freqencyHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqencyHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqencyhz_)));
          set_has_freqencyhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dampingRatio;
        break;
      }

      // optional float dampingRatio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dampingRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dampingratio_)));
          set_has_dampingratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGDistanceJointDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collideconnected(), output);
  }

  // optional float freqencyHz = 2;
  if (has_freqencyhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->freqencyhz(), output);
  }

  // optional float dampingRatio = 3;
  if (has_dampingratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dampingratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGDistanceJointDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collideconnected(), target);
  }

  // optional float freqencyHz = 2;
  if (has_freqencyhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->freqencyhz(), target);
  }

  // optional float dampingRatio = 3;
  if (has_dampingratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dampingratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGDistanceJointDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collideConnected = 1;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional float freqencyHz = 2;
    if (has_freqencyhz()) {
      total_size += 1 + 4;
    }

    // optional float dampingRatio = 3;
    if (has_dampingratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDistanceJointDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDistanceJointDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDistanceJointDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDistanceJointDef::MergeFrom(const CGDistanceJointDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
    if (from.has_freqencyhz()) {
      set_freqencyhz(from.freqencyhz());
    }
    if (from.has_dampingratio()) {
      set_dampingratio(from.dampingratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDistanceJointDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDistanceJointDef::CopyFrom(const CGDistanceJointDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDistanceJointDef::IsInitialized() const {

  return true;
}

void CGDistanceJointDef::Swap(CGDistanceJointDef* other) {
  if (other != this) {
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(freqencyhz_, other->freqencyhz_);
    std::swap(dampingratio_, other->dampingratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDistanceJointDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDistanceJointDef_descriptor_;
  metadata.reflection = CGDistanceJointDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRevoluteJointDef::kCollideConnectedFieldNumber;
const int CGRevoluteJointDef::kReferenceAngleFieldNumber;
const int CGRevoluteJointDef::kEnableLimitFieldNumber;
const int CGRevoluteJointDef::kLowerAngleFieldNumber;
const int CGRevoluteJointDef::kUpperAngleFieldNumber;
const int CGRevoluteJointDef::kEnableMotorFieldNumber;
const int CGRevoluteJointDef::kMotorSpeedFieldNumber;
const int CGRevoluteJointDef::kMaxMotorTorqueFieldNumber;
#endif  // !_MSC_VER

CGRevoluteJointDef::CGRevoluteJointDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGRevoluteJointDef::InitAsDefaultInstance() {
}

CGRevoluteJointDef::CGRevoluteJointDef(const CGRevoluteJointDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGRevoluteJointDef::SharedCtor() {
  _cached_size_ = 0;
  collideconnected_ = false;
  referenceangle_ = 0;
  enablelimit_ = false;
  lowerangle_ = 0;
  upperangle_ = 0;
  enablemotor_ = false;
  motorspeed_ = 0;
  maxmotortorque_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRevoluteJointDef::~CGRevoluteJointDef() {
  SharedDtor();
}

void CGRevoluteJointDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRevoluteJointDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRevoluteJointDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRevoluteJointDef_descriptor_;
}

const CGRevoluteJointDef& CGRevoluteJointDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGRevoluteJointDef* CGRevoluteJointDef::default_instance_ = NULL;

CGRevoluteJointDef* CGRevoluteJointDef::New() const {
  return new CGRevoluteJointDef;
}

void CGRevoluteJointDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collideconnected_ = false;
    referenceangle_ = 0;
    enablelimit_ = false;
    lowerangle_ = 0;
    upperangle_ = 0;
    enablemotor_ = false;
    motorspeed_ = 0;
    maxmotortorque_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRevoluteJointDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collideConnected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_referenceAngle;
        break;
      }

      // optional float referenceAngle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_referenceAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &referenceangle_)));
          set_has_referenceangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enableLimit;
        break;
      }

      // optional bool enableLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablelimit_)));
          set_has_enablelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_lowerAngle;
        break;
      }

      // optional float lowerAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lowerAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowerangle_)));
          set_has_lowerangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_upperAngle;
        break;
      }

      // optional float upperAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_upperAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upperangle_)));
          set_has_upperangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enableMotor;
        break;
      }

      // optional bool enableMotor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableMotor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablemotor_)));
          set_has_enablemotor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_motorSpeed;
        break;
      }

      // optional float motorSpeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motorSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motorspeed_)));
          set_has_motorspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxMotorTorque;
        break;
      }

      // optional float maxMotorTorque = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxMotorTorque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxmotortorque_)));
          set_has_maxmotortorque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGRevoluteJointDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collideconnected(), output);
  }

  // optional float referenceAngle = 2;
  if (has_referenceangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->referenceangle(), output);
  }

  // optional bool enableLimit = 3;
  if (has_enablelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enablelimit(), output);
  }

  // optional float lowerAngle = 4;
  if (has_lowerangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lowerangle(), output);
  }

  // optional float upperAngle = 5;
  if (has_upperangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->upperangle(), output);
  }

  // optional bool enableMotor = 6;
  if (has_enablemotor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enablemotor(), output);
  }

  // optional float motorSpeed = 7;
  if (has_motorspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->motorspeed(), output);
  }

  // optional float maxMotorTorque = 8;
  if (has_maxmotortorque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxmotortorque(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGRevoluteJointDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collideconnected(), target);
  }

  // optional float referenceAngle = 2;
  if (has_referenceangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->referenceangle(), target);
  }

  // optional bool enableLimit = 3;
  if (has_enablelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enablelimit(), target);
  }

  // optional float lowerAngle = 4;
  if (has_lowerangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lowerangle(), target);
  }

  // optional float upperAngle = 5;
  if (has_upperangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->upperangle(), target);
  }

  // optional bool enableMotor = 6;
  if (has_enablemotor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enablemotor(), target);
  }

  // optional float motorSpeed = 7;
  if (has_motorspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->motorspeed(), target);
  }

  // optional float maxMotorTorque = 8;
  if (has_maxmotortorque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxmotortorque(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGRevoluteJointDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collideConnected = 1;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional float referenceAngle = 2;
    if (has_referenceangle()) {
      total_size += 1 + 4;
    }

    // optional bool enableLimit = 3;
    if (has_enablelimit()) {
      total_size += 1 + 1;
    }

    // optional float lowerAngle = 4;
    if (has_lowerangle()) {
      total_size += 1 + 4;
    }

    // optional float upperAngle = 5;
    if (has_upperangle()) {
      total_size += 1 + 4;
    }

    // optional bool enableMotor = 6;
    if (has_enablemotor()) {
      total_size += 1 + 1;
    }

    // optional float motorSpeed = 7;
    if (has_motorspeed()) {
      total_size += 1 + 4;
    }

    // optional float maxMotorTorque = 8;
    if (has_maxmotortorque()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRevoluteJointDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRevoluteJointDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRevoluteJointDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRevoluteJointDef::MergeFrom(const CGRevoluteJointDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
    if (from.has_referenceangle()) {
      set_referenceangle(from.referenceangle());
    }
    if (from.has_enablelimit()) {
      set_enablelimit(from.enablelimit());
    }
    if (from.has_lowerangle()) {
      set_lowerangle(from.lowerangle());
    }
    if (from.has_upperangle()) {
      set_upperangle(from.upperangle());
    }
    if (from.has_enablemotor()) {
      set_enablemotor(from.enablemotor());
    }
    if (from.has_motorspeed()) {
      set_motorspeed(from.motorspeed());
    }
    if (from.has_maxmotortorque()) {
      set_maxmotortorque(from.maxmotortorque());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRevoluteJointDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRevoluteJointDef::CopyFrom(const CGRevoluteJointDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRevoluteJointDef::IsInitialized() const {

  return true;
}

void CGRevoluteJointDef::Swap(CGRevoluteJointDef* other) {
  if (other != this) {
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(referenceangle_, other->referenceangle_);
    std::swap(enablelimit_, other->enablelimit_);
    std::swap(lowerangle_, other->lowerangle_);
    std::swap(upperangle_, other->upperangle_);
    std::swap(enablemotor_, other->enablemotor_);
    std::swap(motorspeed_, other->motorspeed_);
    std::swap(maxmotortorque_, other->maxmotortorque_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRevoluteJointDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRevoluteJointDef_descriptor_;
  metadata.reflection = CGRevoluteJointDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPrismaticJointDef::kCollideConnectedFieldNumber;
const int CGPrismaticJointDef::kAnchorFieldNumber;
const int CGPrismaticJointDef::kAxisFieldNumber;
const int CGPrismaticJointDef::kReferenceAngleFieldNumber;
const int CGPrismaticJointDef::kEnableLimitFieldNumber;
const int CGPrismaticJointDef::kLowerTranslationFieldNumber;
const int CGPrismaticJointDef::kUpperTranslationFieldNumber;
const int CGPrismaticJointDef::kEnableMotorFieldNumber;
const int CGPrismaticJointDef::kMaxMotorForceFieldNumber;
const int CGPrismaticJointDef::kMotorSpeedFieldNumber;
#endif  // !_MSC_VER

CGPrismaticJointDef::CGPrismaticJointDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGPrismaticJointDef::InitAsDefaultInstance() {
  anchor_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
  axis_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
}

CGPrismaticJointDef::CGPrismaticJointDef(const CGPrismaticJointDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGPrismaticJointDef::SharedCtor() {
  _cached_size_ = 0;
  collideconnected_ = false;
  anchor_ = NULL;
  axis_ = NULL;
  referenceangle_ = 0;
  enablelimit_ = false;
  lowertranslation_ = 0;
  uppertranslation_ = 0;
  enablemotor_ = false;
  maxmotorforce_ = 0;
  motorspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPrismaticJointDef::~CGPrismaticJointDef() {
  SharedDtor();
}

void CGPrismaticJointDef::SharedDtor() {
  if (this != default_instance_) {
    delete anchor_;
    delete axis_;
  }
}

void CGPrismaticJointDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPrismaticJointDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPrismaticJointDef_descriptor_;
}

const CGPrismaticJointDef& CGPrismaticJointDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGPrismaticJointDef* CGPrismaticJointDef::default_instance_ = NULL;

CGPrismaticJointDef* CGPrismaticJointDef::New() const {
  return new CGPrismaticJointDef;
}

void CGPrismaticJointDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collideconnected_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    if (has_axis()) {
      if (axis_ != NULL) axis_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    referenceangle_ = 0;
    enablelimit_ = false;
    lowertranslation_ = 0;
    uppertranslation_ = 0;
    enablemotor_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxmotorforce_ = 0;
    motorspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPrismaticJointDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collideConnected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_anchor;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 anchor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_axis;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 axis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_axis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_referenceAngle;
        break;
      }

      // optional float referenceAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_referenceAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &referenceangle_)));
          set_has_referenceangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enableLimit;
        break;
      }

      // optional bool enableLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablelimit_)));
          set_has_enablelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_lowerTranslation;
        break;
      }

      // optional float lowerTranslation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lowerTranslation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowertranslation_)));
          set_has_lowertranslation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_upperTranslation;
        break;
      }

      // optional float upperTranslation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_upperTranslation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uppertranslation_)));
          set_has_uppertranslation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_enableMotor;
        break;
      }

      // optional bool enableMotor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableMotor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablemotor_)));
          set_has_enablemotor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_maxMotorForce;
        break;
      }

      // optional float maxMotorForce = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxMotorForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxmotorforce_)));
          set_has_maxmotorforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_motorSpeed;
        break;
      }

      // optional float motorSpeed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motorSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motorspeed_)));
          set_has_motorspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGPrismaticJointDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collideconnected(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 anchor = 2;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->anchor(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 axis = 3;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->axis(), output);
  }

  // optional float referenceAngle = 5;
  if (has_referenceangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->referenceangle(), output);
  }

  // optional bool enableLimit = 6;
  if (has_enablelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enablelimit(), output);
  }

  // optional float lowerTranslation = 7;
  if (has_lowertranslation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lowertranslation(), output);
  }

  // optional float upperTranslation = 8;
  if (has_uppertranslation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->uppertranslation(), output);
  }

  // optional bool enableMotor = 9;
  if (has_enablemotor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enablemotor(), output);
  }

  // optional float maxMotorForce = 10;
  if (has_maxmotorforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->maxmotorforce(), output);
  }

  // optional float motorSpeed = 11;
  if (has_motorspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->motorspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGPrismaticJointDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collideconnected(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 anchor = 2;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->anchor(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 axis = 3;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->axis(), target);
  }

  // optional float referenceAngle = 5;
  if (has_referenceangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->referenceangle(), target);
  }

  // optional bool enableLimit = 6;
  if (has_enablelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enablelimit(), target);
  }

  // optional float lowerTranslation = 7;
  if (has_lowertranslation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lowertranslation(), target);
  }

  // optional float upperTranslation = 8;
  if (has_uppertranslation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->uppertranslation(), target);
  }

  // optional bool enableMotor = 9;
  if (has_enablemotor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enablemotor(), target);
  }

  // optional float maxMotorForce = 10;
  if (has_maxmotorforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->maxmotorforce(), target);
  }

  // optional float motorSpeed = 11;
  if (has_motorspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->motorspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGPrismaticJointDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collideConnected = 1;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional .com.laex.cg2d.model.CGVector2 anchor = 2;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // optional .com.laex.cg2d.model.CGVector2 axis = 3;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axis());
    }

    // optional float referenceAngle = 5;
    if (has_referenceangle()) {
      total_size += 1 + 4;
    }

    // optional bool enableLimit = 6;
    if (has_enablelimit()) {
      total_size += 1 + 1;
    }

    // optional float lowerTranslation = 7;
    if (has_lowertranslation()) {
      total_size += 1 + 4;
    }

    // optional float upperTranslation = 8;
    if (has_uppertranslation()) {
      total_size += 1 + 4;
    }

    // optional bool enableMotor = 9;
    if (has_enablemotor()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float maxMotorForce = 10;
    if (has_maxmotorforce()) {
      total_size += 1 + 4;
    }

    // optional float motorSpeed = 11;
    if (has_motorspeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPrismaticJointDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPrismaticJointDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPrismaticJointDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPrismaticJointDef::MergeFrom(const CGPrismaticJointDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.anchor());
    }
    if (from.has_axis()) {
      mutable_axis()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.axis());
    }
    if (from.has_referenceangle()) {
      set_referenceangle(from.referenceangle());
    }
    if (from.has_enablelimit()) {
      set_enablelimit(from.enablelimit());
    }
    if (from.has_lowertranslation()) {
      set_lowertranslation(from.lowertranslation());
    }
    if (from.has_uppertranslation()) {
      set_uppertranslation(from.uppertranslation());
    }
    if (from.has_enablemotor()) {
      set_enablemotor(from.enablemotor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxmotorforce()) {
      set_maxmotorforce(from.maxmotorforce());
    }
    if (from.has_motorspeed()) {
      set_motorspeed(from.motorspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPrismaticJointDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPrismaticJointDef::CopyFrom(const CGPrismaticJointDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPrismaticJointDef::IsInitialized() const {

  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_axis()) {
    if (!this->axis().IsInitialized()) return false;
  }
  return true;
}

void CGPrismaticJointDef::Swap(CGPrismaticJointDef* other) {
  if (other != this) {
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(anchor_, other->anchor_);
    std::swap(axis_, other->axis_);
    std::swap(referenceangle_, other->referenceangle_);
    std::swap(enablelimit_, other->enablelimit_);
    std::swap(lowertranslation_, other->lowertranslation_);
    std::swap(uppertranslation_, other->uppertranslation_);
    std::swap(enablemotor_, other->enablemotor_);
    std::swap(maxmotorforce_, other->maxmotorforce_);
    std::swap(motorspeed_, other->motorspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPrismaticJointDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPrismaticJointDef_descriptor_;
  metadata.reflection = CGPrismaticJointDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPulleyJointDef::kCollideConnectedFieldNumber;
const int CGPulleyJointDef::kGroundAnchorAFieldNumber;
const int CGPulleyJointDef::kGroundAnchorBFieldNumber;
const int CGPulleyJointDef::kRatioFieldNumber;
#endif  // !_MSC_VER

CGPulleyJointDef::CGPulleyJointDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGPulleyJointDef::InitAsDefaultInstance() {
  groundanchora_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
  groundanchorb_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
}

CGPulleyJointDef::CGPulleyJointDef(const CGPulleyJointDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGPulleyJointDef::SharedCtor() {
  _cached_size_ = 0;
  collideconnected_ = false;
  groundanchora_ = NULL;
  groundanchorb_ = NULL;
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPulleyJointDef::~CGPulleyJointDef() {
  SharedDtor();
}

void CGPulleyJointDef::SharedDtor() {
  if (this != default_instance_) {
    delete groundanchora_;
    delete groundanchorb_;
  }
}

void CGPulleyJointDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPulleyJointDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPulleyJointDef_descriptor_;
}

const CGPulleyJointDef& CGPulleyJointDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGPulleyJointDef* CGPulleyJointDef::default_instance_ = NULL;

CGPulleyJointDef* CGPulleyJointDef::New() const {
  return new CGPulleyJointDef;
}

void CGPulleyJointDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collideconnected_ = false;
    if (has_groundanchora()) {
      if (groundanchora_ != NULL) groundanchora_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    if (has_groundanchorb()) {
      if (groundanchorb_ != NULL) groundanchorb_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    ratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPulleyJointDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collideConnected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groundAnchorA;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 groundAnchorA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groundAnchorA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groundanchora()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groundAnchorB;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 groundAnchorB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groundAnchorB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groundanchorb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ratio;
        break;
      }

      // optional float ratio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGPulleyJointDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collideconnected(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 groundAnchorA = 2;
  if (has_groundanchora()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groundanchora(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 groundAnchorB = 3;
  if (has_groundanchorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groundanchorb(), output);
  }

  // optional float ratio = 4;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGPulleyJointDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collideconnected(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 groundAnchorA = 2;
  if (has_groundanchora()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groundanchora(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 groundAnchorB = 3;
  if (has_groundanchorb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->groundanchorb(), target);
  }

  // optional float ratio = 4;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGPulleyJointDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collideConnected = 1;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional .com.laex.cg2d.model.CGVector2 groundAnchorA = 2;
    if (has_groundanchora()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groundanchora());
    }

    // optional .com.laex.cg2d.model.CGVector2 groundAnchorB = 3;
    if (has_groundanchorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groundanchorb());
    }

    // optional float ratio = 4;
    if (has_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPulleyJointDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPulleyJointDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPulleyJointDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPulleyJointDef::MergeFrom(const CGPulleyJointDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
    if (from.has_groundanchora()) {
      mutable_groundanchora()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.groundanchora());
    }
    if (from.has_groundanchorb()) {
      mutable_groundanchorb()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.groundanchorb());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPulleyJointDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPulleyJointDef::CopyFrom(const CGPulleyJointDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPulleyJointDef::IsInitialized() const {

  if (has_groundanchora()) {
    if (!this->groundanchora().IsInitialized()) return false;
  }
  if (has_groundanchorb()) {
    if (!this->groundanchorb().IsInitialized()) return false;
  }
  return true;
}

void CGPulleyJointDef::Swap(CGPulleyJointDef* other) {
  if (other != this) {
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(groundanchora_, other->groundanchora_);
    std::swap(groundanchorb_, other->groundanchorb_);
    std::swap(ratio_, other->ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPulleyJointDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPulleyJointDef_descriptor_;
  metadata.reflection = CGPulleyJointDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFrictionJointDef::kCollideConnectedFieldNumber;
const int CGFrictionJointDef::kMaxForceFieldNumber;
const int CGFrictionJointDef::kMaxTorqueFieldNumber;
#endif  // !_MSC_VER

CGFrictionJointDef::CGFrictionJointDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGFrictionJointDef::InitAsDefaultInstance() {
}

CGFrictionJointDef::CGFrictionJointDef(const CGFrictionJointDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGFrictionJointDef::SharedCtor() {
  _cached_size_ = 0;
  collideconnected_ = false;
  maxforce_ = 0;
  maxtorque_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFrictionJointDef::~CGFrictionJointDef() {
  SharedDtor();
}

void CGFrictionJointDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFrictionJointDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFrictionJointDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFrictionJointDef_descriptor_;
}

const CGFrictionJointDef& CGFrictionJointDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGFrictionJointDef* CGFrictionJointDef::default_instance_ = NULL;

CGFrictionJointDef* CGFrictionJointDef::New() const {
  return new CGFrictionJointDef;
}

void CGFrictionJointDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collideconnected_ = false;
    maxforce_ = 0;
    maxtorque_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFrictionJointDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collideConnected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_maxForce;
        break;
      }

      // optional float maxForce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxforce_)));
          set_has_maxforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maxTorque;
        break;
      }

      // optional float maxTorque = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxTorque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxtorque_)));
          set_has_maxtorque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGFrictionJointDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collideconnected(), output);
  }

  // optional float maxForce = 2;
  if (has_maxforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxforce(), output);
  }

  // optional float maxTorque = 3;
  if (has_maxtorque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxtorque(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGFrictionJointDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collideconnected(), target);
  }

  // optional float maxForce = 2;
  if (has_maxforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxforce(), target);
  }

  // optional float maxTorque = 3;
  if (has_maxtorque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxtorque(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGFrictionJointDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collideConnected = 1;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional float maxForce = 2;
    if (has_maxforce()) {
      total_size += 1 + 4;
    }

    // optional float maxTorque = 3;
    if (has_maxtorque()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFrictionJointDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFrictionJointDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFrictionJointDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFrictionJointDef::MergeFrom(const CGFrictionJointDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
    if (from.has_maxforce()) {
      set_maxforce(from.maxforce());
    }
    if (from.has_maxtorque()) {
      set_maxtorque(from.maxtorque());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFrictionJointDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFrictionJointDef::CopyFrom(const CGFrictionJointDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFrictionJointDef::IsInitialized() const {

  return true;
}

void CGFrictionJointDef::Swap(CGFrictionJointDef* other) {
  if (other != this) {
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(maxforce_, other->maxforce_);
    std::swap(maxtorque_, other->maxtorque_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFrictionJointDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFrictionJointDef_descriptor_;
  metadata.reflection = CGFrictionJointDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGWeldJointDef::kCollideConnectedFieldNumber;
#endif  // !_MSC_VER

CGWeldJointDef::CGWeldJointDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGWeldJointDef::InitAsDefaultInstance() {
}

CGWeldJointDef::CGWeldJointDef(const CGWeldJointDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGWeldJointDef::SharedCtor() {
  _cached_size_ = 0;
  collideconnected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGWeldJointDef::~CGWeldJointDef() {
  SharedDtor();
}

void CGWeldJointDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGWeldJointDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGWeldJointDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGWeldJointDef_descriptor_;
}

const CGWeldJointDef& CGWeldJointDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGWeldJointDef* CGWeldJointDef::default_instance_ = NULL;

CGWeldJointDef* CGWeldJointDef::New() const {
  return new CGWeldJointDef;
}

void CGWeldJointDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collideconnected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGWeldJointDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collideConnected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGWeldJointDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collideconnected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGWeldJointDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collideConnected = 1;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collideconnected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGWeldJointDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collideConnected = 1;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGWeldJointDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGWeldJointDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGWeldJointDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGWeldJointDef::MergeFrom(const CGWeldJointDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGWeldJointDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGWeldJointDef::CopyFrom(const CGWeldJointDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGWeldJointDef::IsInitialized() const {

  return true;
}

void CGWeldJointDef::Swap(CGWeldJointDef* other) {
  if (other != this) {
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGWeldJointDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGWeldJointDef_descriptor_;
  metadata.reflection = CGWeldJointDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGResourceFile::kResourceFileFieldNumber;
const int CGResourceFile::kResourceFileAbsoluteFieldNumber;
#endif  // !_MSC_VER

CGResourceFile::CGResourceFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGResourceFile::InitAsDefaultInstance() {
}

CGResourceFile::CGResourceFile(const CGResourceFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGResourceFile::SharedCtor() {
  _cached_size_ = 0;
  resourcefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcefileabsolute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGResourceFile::~CGResourceFile() {
  SharedDtor();
}

void CGResourceFile::SharedDtor() {
  if (resourcefile_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcefile_;
  }
  if (resourcefileabsolute_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcefileabsolute_;
  }
  if (this != default_instance_) {
  }
}

void CGResourceFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGResourceFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGResourceFile_descriptor_;
}

const CGResourceFile& CGResourceFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGResourceFile* CGResourceFile::default_instance_ = NULL;

CGResourceFile* CGResourceFile::New() const {
  return new CGResourceFile;
}

void CGResourceFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resourcefile()) {
      if (resourcefile_ != &::google::protobuf::internal::kEmptyString) {
        resourcefile_->clear();
      }
    }
    if (has_resourcefileabsolute()) {
      if (resourcefileabsolute_ != &::google::protobuf::internal::kEmptyString) {
        resourcefileabsolute_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGResourceFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resourceFile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcefile().data(), this->resourcefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resourceFileAbsolute;
        break;
      }

      // optional string resourceFileAbsolute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceFileAbsolute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcefileabsolute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcefileabsolute().data(), this->resourcefileabsolute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGResourceFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string resourceFile = 1;
  if (has_resourcefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcefile().data(), this->resourcefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resourcefile(), output);
  }

  // optional string resourceFileAbsolute = 2;
  if (has_resourcefileabsolute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcefileabsolute().data(), this->resourcefileabsolute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resourcefileabsolute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGResourceFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string resourceFile = 1;
  if (has_resourcefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcefile().data(), this->resourcefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourcefile(), target);
  }

  // optional string resourceFileAbsolute = 2;
  if (has_resourcefileabsolute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcefileabsolute().data(), this->resourcefileabsolute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resourcefileabsolute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGResourceFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string resourceFile = 1;
    if (has_resourcefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcefile());
    }

    // optional string resourceFileAbsolute = 2;
    if (has_resourcefileabsolute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcefileabsolute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGResourceFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGResourceFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGResourceFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGResourceFile::MergeFrom(const CGResourceFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcefile()) {
      set_resourcefile(from.resourcefile());
    }
    if (from.has_resourcefileabsolute()) {
      set_resourcefileabsolute(from.resourcefileabsolute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGResourceFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGResourceFile::CopyFrom(const CGResourceFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGResourceFile::IsInitialized() const {

  return true;
}

void CGResourceFile::Swap(CGResourceFile* other) {
  if (other != this) {
    std::swap(resourcefile_, other->resourcefile_);
    std::swap(resourcefileabsolute_, other->resourcefileabsolute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGResourceFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGResourceFile_descriptor_;
  metadata.reflection = CGResourceFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEntitySpritesheetItem::kExtractBoundsFieldNumber;
const int CGEntitySpritesheetItem::kFrameIndexFieldNumber;
#endif  // !_MSC_VER

CGEntitySpritesheetItem::CGEntitySpritesheetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGEntitySpritesheetItem::InitAsDefaultInstance() {
  extractbounds_ = const_cast< ::com::laex::cg2d::model::CGBounds*>(&::com::laex::cg2d::model::CGBounds::default_instance());
}

CGEntitySpritesheetItem::CGEntitySpritesheetItem(const CGEntitySpritesheetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGEntitySpritesheetItem::SharedCtor() {
  _cached_size_ = 0;
  extractbounds_ = NULL;
  frameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEntitySpritesheetItem::~CGEntitySpritesheetItem() {
  SharedDtor();
}

void CGEntitySpritesheetItem::SharedDtor() {
  if (this != default_instance_) {
    delete extractbounds_;
  }
}

void CGEntitySpritesheetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEntitySpritesheetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEntitySpritesheetItem_descriptor_;
}

const CGEntitySpritesheetItem& CGEntitySpritesheetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGEntitySpritesheetItem* CGEntitySpritesheetItem::default_instance_ = NULL;

CGEntitySpritesheetItem* CGEntitySpritesheetItem::New() const {
  return new CGEntitySpritesheetItem;
}

void CGEntitySpritesheetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_extractbounds()) {
      if (extractbounds_ != NULL) extractbounds_->::com::laex::cg2d::model::CGBounds::Clear();
    }
    frameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEntitySpritesheetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.laex.cg2d.model.CGBounds extractBounds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extractbounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGEntitySpritesheetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.laex.cg2d.model.CGBounds extractBounds = 1;
  if (has_extractbounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->extractbounds(), output);
  }

  // optional int32 frameIndex = 2;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGEntitySpritesheetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.laex.cg2d.model.CGBounds extractBounds = 1;
  if (has_extractbounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->extractbounds(), target);
  }

  // optional int32 frameIndex = 2;
  if (has_frameindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGEntitySpritesheetItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.laex.cg2d.model.CGBounds extractBounds = 1;
    if (has_extractbounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extractbounds());
    }

    // optional int32 frameIndex = 2;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEntitySpritesheetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEntitySpritesheetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEntitySpritesheetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEntitySpritesheetItem::MergeFrom(const CGEntitySpritesheetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extractbounds()) {
      mutable_extractbounds()->::com::laex::cg2d::model::CGBounds::MergeFrom(from.extractbounds());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEntitySpritesheetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEntitySpritesheetItem::CopyFrom(const CGEntitySpritesheetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEntitySpritesheetItem::IsInitialized() const {

  return true;
}

void CGEntitySpritesheetItem::Swap(CGEntitySpritesheetItem* other) {
  if (other != this) {
    std::swap(extractbounds_, other->extractbounds_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEntitySpritesheetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEntitySpritesheetItem_descriptor_;
  metadata.reflection = CGEntitySpritesheetItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEntityAnimation::kAnimationNameFieldNumber;
const int CGEntityAnimation::kAnimationDurationFieldNumber;
const int CGEntityAnimation::kDefaultAnimationFieldNumber;
const int CGEntityAnimation::kCollisionTypeFieldNumber;
const int CGEntityAnimation::kSpritesheetFileFieldNumber;
const int CGEntityAnimation::kSpritesheetJsonFileFieldNumber;
const int CGEntityAnimation::kFixtureFileFieldNumber;
const int CGEntityAnimation::kVerticesFieldNumber;
const int CGEntityAnimation::kSpritesheetItemsFieldNumber;
#endif  // !_MSC_VER

CGEntityAnimation::CGEntityAnimation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGEntityAnimation::InitAsDefaultInstance() {
  spritesheetfile_ = const_cast< ::com::laex::cg2d::model::CGResourceFile*>(&::com::laex::cg2d::model::CGResourceFile::default_instance());
  spritesheetjsonfile_ = const_cast< ::com::laex::cg2d::model::CGResourceFile*>(&::com::laex::cg2d::model::CGResourceFile::default_instance());
  fixturefile_ = const_cast< ::com::laex::cg2d::model::CGResourceFile*>(&::com::laex::cg2d::model::CGResourceFile::default_instance());
}

CGEntityAnimation::CGEntityAnimation(const CGEntityAnimation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGEntityAnimation::SharedCtor() {
  _cached_size_ = 0;
  animationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  animationduration_ = 0;
  defaultanimation_ = false;
  collisiontype_ = 0;
  spritesheetfile_ = NULL;
  spritesheetjsonfile_ = NULL;
  fixturefile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEntityAnimation::~CGEntityAnimation() {
  SharedDtor();
}

void CGEntityAnimation::SharedDtor() {
  if (animationname_ != &::google::protobuf::internal::kEmptyString) {
    delete animationname_;
  }
  if (this != default_instance_) {
    delete spritesheetfile_;
    delete spritesheetjsonfile_;
    delete fixturefile_;
  }
}

void CGEntityAnimation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEntityAnimation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEntityAnimation_descriptor_;
}

const CGEntityAnimation& CGEntityAnimation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGEntityAnimation* CGEntityAnimation::default_instance_ = NULL;

CGEntityAnimation* CGEntityAnimation::New() const {
  return new CGEntityAnimation;
}

void CGEntityAnimation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_animationname()) {
      if (animationname_ != &::google::protobuf::internal::kEmptyString) {
        animationname_->clear();
      }
    }
    animationduration_ = 0;
    defaultanimation_ = false;
    collisiontype_ = 0;
    if (has_spritesheetfile()) {
      if (spritesheetfile_ != NULL) spritesheetfile_->::com::laex::cg2d::model::CGResourceFile::Clear();
    }
    if (has_spritesheetjsonfile()) {
      if (spritesheetjsonfile_ != NULL) spritesheetjsonfile_->::com::laex::cg2d::model::CGResourceFile::Clear();
    }
    if (has_fixturefile()) {
      if (fixturefile_ != NULL) fixturefile_->::com::laex::cg2d::model::CGResourceFile::Clear();
    }
  }
  vertices_.Clear();
  spritesheetitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEntityAnimation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string animationName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->animationname().data(), this->animationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_animationDuration;
        break;
      }

      // optional float animationDuration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_animationDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &animationduration_)));
          set_has_animationduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defaultAnimation;
        break;
      }

      // optional bool defaultAnimation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defaultAnimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defaultanimation_)));
          set_has_defaultanimation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_collisionType;
        break;
      }

      // optional .com.laex.cg2d.model.CGEntityCollisionType collisionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collisionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::laex::cg2d::model::CGEntityCollisionType_IsValid(value)) {
            set_collisiontype(static_cast< ::com::laex::cg2d::model::CGEntityCollisionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spritesheetFile;
        break;
      }

      // optional .com.laex.cg2d.model.CGResourceFile spritesheetFile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spritesheetFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spritesheetfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_spritesheetJsonFile;
        break;
      }

      // optional .com.laex.cg2d.model.CGResourceFile spritesheetJsonFile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spritesheetJsonFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spritesheetjsonfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fixtureFile;
        break;
      }

      // optional .com.laex.cg2d.model.CGResourceFile fixtureFile = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixtureFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixturefile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vertices;
        break;
      }

      // repeated .com.laex.cg2d.model.CGVector2 vertices = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vertices;
        if (input->ExpectTag(74)) goto parse_spritesheetItems;
        break;
      }

      // repeated .com.laex.cg2d.model.CGEntitySpritesheetItem spritesheetItems = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spritesheetItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spritesheetitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_spritesheetItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGEntityAnimation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string animationName = 1;
  if (has_animationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animationname().data(), this->animationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->animationname(), output);
  }

  // optional float animationDuration = 2;
  if (has_animationduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->animationduration(), output);
  }

  // optional bool defaultAnimation = 3;
  if (has_defaultanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->defaultanimation(), output);
  }

  // optional .com.laex.cg2d.model.CGEntityCollisionType collisionType = 4;
  if (has_collisiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->collisiontype(), output);
  }

  // optional .com.laex.cg2d.model.CGResourceFile spritesheetFile = 5;
  if (has_spritesheetfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->spritesheetfile(), output);
  }

  // optional .com.laex.cg2d.model.CGResourceFile spritesheetJsonFile = 6;
  if (has_spritesheetjsonfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->spritesheetjsonfile(), output);
  }

  // optional .com.laex.cg2d.model.CGResourceFile fixtureFile = 7;
  if (has_fixturefile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fixturefile(), output);
  }

  // repeated .com.laex.cg2d.model.CGVector2 vertices = 8;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vertices(i), output);
  }

  // repeated .com.laex.cg2d.model.CGEntitySpritesheetItem spritesheetItems = 9;
  for (int i = 0; i < this->spritesheetitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->spritesheetitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGEntityAnimation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string animationName = 1;
  if (has_animationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animationname().data(), this->animationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animationname(), target);
  }

  // optional float animationDuration = 2;
  if (has_animationduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->animationduration(), target);
  }

  // optional bool defaultAnimation = 3;
  if (has_defaultanimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->defaultanimation(), target);
  }

  // optional .com.laex.cg2d.model.CGEntityCollisionType collisionType = 4;
  if (has_collisiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->collisiontype(), target);
  }

  // optional .com.laex.cg2d.model.CGResourceFile spritesheetFile = 5;
  if (has_spritesheetfile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->spritesheetfile(), target);
  }

  // optional .com.laex.cg2d.model.CGResourceFile spritesheetJsonFile = 6;
  if (has_spritesheetjsonfile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->spritesheetjsonfile(), target);
  }

  // optional .com.laex.cg2d.model.CGResourceFile fixtureFile = 7;
  if (has_fixturefile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fixturefile(), target);
  }

  // repeated .com.laex.cg2d.model.CGVector2 vertices = 8;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vertices(i), target);
  }

  // repeated .com.laex.cg2d.model.CGEntitySpritesheetItem spritesheetItems = 9;
  for (int i = 0; i < this->spritesheetitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->spritesheetitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGEntityAnimation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string animationName = 1;
    if (has_animationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animationname());
    }

    // optional float animationDuration = 2;
    if (has_animationduration()) {
      total_size += 1 + 4;
    }

    // optional bool defaultAnimation = 3;
    if (has_defaultanimation()) {
      total_size += 1 + 1;
    }

    // optional .com.laex.cg2d.model.CGEntityCollisionType collisionType = 4;
    if (has_collisiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->collisiontype());
    }

    // optional .com.laex.cg2d.model.CGResourceFile spritesheetFile = 5;
    if (has_spritesheetfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spritesheetfile());
    }

    // optional .com.laex.cg2d.model.CGResourceFile spritesheetJsonFile = 6;
    if (has_spritesheetjsonfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spritesheetjsonfile());
    }

    // optional .com.laex.cg2d.model.CGResourceFile fixtureFile = 7;
    if (has_fixturefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixturefile());
    }

  }
  // repeated .com.laex.cg2d.model.CGVector2 vertices = 8;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .com.laex.cg2d.model.CGEntitySpritesheetItem spritesheetItems = 9;
  total_size += 1 * this->spritesheetitems_size();
  for (int i = 0; i < this->spritesheetitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spritesheetitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEntityAnimation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEntityAnimation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEntityAnimation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEntityAnimation::MergeFrom(const CGEntityAnimation& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  spritesheetitems_.MergeFrom(from.spritesheetitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animationname()) {
      set_animationname(from.animationname());
    }
    if (from.has_animationduration()) {
      set_animationduration(from.animationduration());
    }
    if (from.has_defaultanimation()) {
      set_defaultanimation(from.defaultanimation());
    }
    if (from.has_collisiontype()) {
      set_collisiontype(from.collisiontype());
    }
    if (from.has_spritesheetfile()) {
      mutable_spritesheetfile()->::com::laex::cg2d::model::CGResourceFile::MergeFrom(from.spritesheetfile());
    }
    if (from.has_spritesheetjsonfile()) {
      mutable_spritesheetjsonfile()->::com::laex::cg2d::model::CGResourceFile::MergeFrom(from.spritesheetjsonfile());
    }
    if (from.has_fixturefile()) {
      mutable_fixturefile()->::com::laex::cg2d::model::CGResourceFile::MergeFrom(from.fixturefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEntityAnimation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEntityAnimation::CopyFrom(const CGEntityAnimation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEntityAnimation::IsInitialized() const {

  for (int i = 0; i < vertices_size(); i++) {
    if (!this->vertices(i).IsInitialized()) return false;
  }
  return true;
}

void CGEntityAnimation::Swap(CGEntityAnimation* other) {
  if (other != this) {
    std::swap(animationname_, other->animationname_);
    std::swap(animationduration_, other->animationduration_);
    std::swap(defaultanimation_, other->defaultanimation_);
    std::swap(collisiontype_, other->collisiontype_);
    std::swap(spritesheetfile_, other->spritesheetfile_);
    std::swap(spritesheetjsonfile_, other->spritesheetjsonfile_);
    std::swap(fixturefile_, other->fixturefile_);
    vertices_.Swap(&other->vertices_);
    spritesheetitems_.Swap(&other->spritesheetitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEntityAnimation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEntityAnimation_descriptor_;
  metadata.reflection = CGEntityAnimation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEntity::kAnimationsFieldNumber;
#endif  // !_MSC_VER

CGEntity::CGEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGEntity::InitAsDefaultInstance() {
}

CGEntity::CGEntity(const CGEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGEntity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEntity::~CGEntity() {
  SharedDtor();
}

void CGEntity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEntity_descriptor_;
}

const CGEntity& CGEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGEntity* CGEntity::default_instance_ = NULL;

CGEntity* CGEntity::New() const {
  return new CGEntity;
}

void CGEntity::Clear() {
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.laex.cg2d.model.CGEntityAnimation animations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_animations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.laex.cg2d.model.CGEntityAnimation animations = 1;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.laex.cg2d.model.CGEntityAnimation animations = 1;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGEntity::ByteSize() const {
  int total_size = 0;

  // repeated .com.laex.cg2d.model.CGEntityAnimation animations = 1;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEntity::MergeFrom(const CGEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEntity::CopyFrom(const CGEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEntity::IsInitialized() const {

  for (int i = 0; i < animations_size(); i++) {
    if (!this->animations(i).IsInitialized()) return false;
  }
  return true;
}

void CGEntity::Swap(CGEntity* other) {
  if (other != this) {
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEntity_descriptor_;
  metadata.reflection = CGEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBounds::kXFieldNumber;
const int CGBounds::kYFieldNumber;
const int CGBounds::kWidthFieldNumber;
const int CGBounds::kHeightFieldNumber;
#endif  // !_MSC_VER

CGBounds::CGBounds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGBounds::InitAsDefaultInstance() {
}

CGBounds::CGBounds(const CGBounds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGBounds::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBounds::~CGBounds() {
  SharedDtor();
}

void CGBounds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBounds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBounds_descriptor_;
}

const CGBounds& CGBounds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGBounds* CGBounds::default_instance_ = NULL;

CGBounds* CGBounds::New() const {
  return new CGBounds;
}

void CGBounds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // optional float width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // optional float height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGBounds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGBounds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float width = 3;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 4;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBounds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBounds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBounds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBounds::MergeFrom(const CGBounds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBounds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBounds::CopyFrom(const CGBounds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBounds::IsInitialized() const {

  return true;
}

void CGBounds::Swap(CGBounds* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBounds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBounds_descriptor_;
  metadata.reflection = CGBounds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGVector2::kXFieldNumber;
const int CGVector2::kYFieldNumber;
#endif  // !_MSC_VER

CGVector2::CGVector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGVector2::InitAsDefaultInstance() {
}

CGVector2::CGVector2(const CGVector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGVector2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGVector2::~CGVector2() {
  SharedDtor();
}

void CGVector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGVector2_descriptor_;
}

const CGVector2& CGVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGVector2* CGVector2::default_instance_ = NULL;

CGVector2* CGVector2::New() const {
  return new CGVector2;
}

void CGVector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGVector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGVector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGVector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGVector2::MergeFrom(const CGVector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGVector2::CopyFrom(const CGVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CGVector2::Swap(CGVector2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGVector2_descriptor_;
  metadata.reflection = CGVector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGColor::kRFieldNumber;
const int CGColor::kGFieldNumber;
const int CGColor::kBFieldNumber;
#endif  // !_MSC_VER

CGColor::CGColor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGColor::InitAsDefaultInstance() {
}

CGColor::CGColor(const CGColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGColor::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGColor::~CGColor() {
  SharedDtor();
}

void CGColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGColor_descriptor_;
}

const CGColor& CGColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGColor* CGColor::default_instance_ = NULL;

CGColor* CGColor::New() const {
  return new CGColor;
}

void CGColor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // required int32 g = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // required int32 b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // required int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // required int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // required int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGColor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // required int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // required int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGColor::MergeFrom(const CGColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGColor::CopyFrom(const CGColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGColor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CGColor::Swap(CGColor* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGColor_descriptor_;
  metadata.reflection = CGColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBodyDef::kActiveFieldNumber;
const int CGBodyDef::kAllowSleepFieldNumber;
const int CGBodyDef::kAngleFieldNumber;
const int CGBodyDef::kAngularDampingFieldNumber;
const int CGBodyDef::kAngularVelocityFieldNumber;
const int CGBodyDef::kAwakeFieldNumber;
const int CGBodyDef::kBulletFieldNumber;
const int CGBodyDef::kFixedRotationFieldNumber;
const int CGBodyDef::kIntertialScaleFieldNumber;
const int CGBodyDef::kLinearDampingFieldNumber;
const int CGBodyDef::kGravityScaleFieldNumber;
const int CGBodyDef::kLinearVelocityFieldNumber;
const int CGBodyDef::kTypeFieldNumber;
const int CGBodyDef::kPositionFieldNumber;
#endif  // !_MSC_VER

CGBodyDef::CGBodyDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGBodyDef::InitAsDefaultInstance() {
  linearvelocity_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
  position_ = const_cast< ::com::laex::cg2d::model::CGVector2*>(&::com::laex::cg2d::model::CGVector2::default_instance());
}

CGBodyDef::CGBodyDef(const CGBodyDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGBodyDef::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  allowsleep_ = false;
  angle_ = 0;
  angulardamping_ = 0;
  angularvelocity_ = 0;
  awake_ = false;
  bullet_ = false;
  fixedrotation_ = false;
  intertialscale_ = 0;
  lineardamping_ = 0;
  gravityscale_ = 0;
  linearvelocity_ = NULL;
  type_ = 1;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBodyDef::~CGBodyDef() {
  SharedDtor();
}

void CGBodyDef::SharedDtor() {
  if (this != default_instance_) {
    delete linearvelocity_;
    delete position_;
  }
}

void CGBodyDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBodyDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBodyDef_descriptor_;
}

const CGBodyDef& CGBodyDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGBodyDef* CGBodyDef::default_instance_ = NULL;

CGBodyDef* CGBodyDef::New() const {
  return new CGBodyDef;
}

void CGBodyDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_ = false;
    allowsleep_ = false;
    angle_ = 0;
    angulardamping_ = 0;
    angularvelocity_ = 0;
    awake_ = false;
    bullet_ = false;
    fixedrotation_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    intertialscale_ = 0;
    lineardamping_ = 0;
    gravityscale_ = 0;
    if (has_linearvelocity()) {
      if (linearvelocity_ != NULL) linearvelocity_->::com::laex::cg2d::model::CGVector2::Clear();
    }
    type_ = 1;
    if (has_position()) {
      if (position_ != NULL) position_->::com::laex::cg2d::model::CGVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBodyDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool active = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allowSleep;
        break;
      }

      // optional bool allowSleep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowSleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowsleep_)));
          set_has_allowsleep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }

      // optional float angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angularDamping;
        break;
      }

      // optional float angularDamping = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angularDamping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angulardamping_)));
          set_has_angulardamping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_angularVelocity;
        break;
      }

      // optional float angularVelocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angularVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angularvelocity_)));
          set_has_angularvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_awake;
        break;
      }

      // optional bool awake = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awake_)));
          set_has_awake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bullet;
        break;
      }

      // optional bool bullet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bullet_)));
          set_has_bullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fixedRotation;
        break;
      }

      // optional bool fixedRotation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixedRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixedrotation_)));
          set_has_fixedrotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_intertialScale;
        break;
      }

      // optional float intertialScale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intertialScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intertialscale_)));
          set_has_intertialscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_linearDamping;
        break;
      }

      // optional float linearDamping = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_linearDamping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lineardamping_)));
          set_has_lineardamping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_gravityScale;
        break;
      }

      // optional float gravityScale = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gravityScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityscale_)));
          set_has_gravityscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_linearVelocity;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 linearVelocity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linearVelocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linearvelocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_type;
        break;
      }

      // optional .com.laex.cg2d.model.CGBodyType type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::laex::cg2d::model::CGBodyType_IsValid(value)) {
            set_type(static_cast< ::com::laex::cg2d::model::CGBodyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_position;
        break;
      }

      // optional .com.laex.cg2d.model.CGVector2 position = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGBodyDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional bool allowSleep = 2;
  if (has_allowsleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allowsleep(), output);
  }

  // optional float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  // optional float angularDamping = 4;
  if (has_angulardamping()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angulardamping(), output);
  }

  // optional float angularVelocity = 5;
  if (has_angularvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angularvelocity(), output);
  }

  // optional bool awake = 6;
  if (has_awake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->awake(), output);
  }

  // optional bool bullet = 7;
  if (has_bullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bullet(), output);
  }

  // optional bool fixedRotation = 8;
  if (has_fixedrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fixedrotation(), output);
  }

  // optional float intertialScale = 9;
  if (has_intertialscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->intertialscale(), output);
  }

  // optional float linearDamping = 10;
  if (has_lineardamping()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lineardamping(), output);
  }

  // optional float gravityScale = 11;
  if (has_gravityscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->gravityscale(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 linearVelocity = 12;
  if (has_linearvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->linearvelocity(), output);
  }

  // optional .com.laex.cg2d.model.CGBodyType type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->type(), output);
  }

  // optional .com.laex.cg2d.model.CGVector2 position = 14;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGBodyDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional bool allowSleep = 2;
  if (has_allowsleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allowsleep(), target);
  }

  // optional float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  // optional float angularDamping = 4;
  if (has_angulardamping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angulardamping(), target);
  }

  // optional float angularVelocity = 5;
  if (has_angularvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angularvelocity(), target);
  }

  // optional bool awake = 6;
  if (has_awake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->awake(), target);
  }

  // optional bool bullet = 7;
  if (has_bullet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bullet(), target);
  }

  // optional bool fixedRotation = 8;
  if (has_fixedrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fixedrotation(), target);
  }

  // optional float intertialScale = 9;
  if (has_intertialscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->intertialscale(), target);
  }

  // optional float linearDamping = 10;
  if (has_lineardamping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lineardamping(), target);
  }

  // optional float gravityScale = 11;
  if (has_gravityscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->gravityscale(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 linearVelocity = 12;
  if (has_linearvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->linearvelocity(), target);
  }

  // optional .com.laex.cg2d.model.CGBodyType type = 13;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->type(), target);
  }

  // optional .com.laex.cg2d.model.CGVector2 position = 14;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGBodyDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool allowSleep = 2;
    if (has_allowsleep()) {
      total_size += 1 + 1;
    }

    // optional float angle = 3;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // optional float angularDamping = 4;
    if (has_angulardamping()) {
      total_size += 1 + 4;
    }

    // optional float angularVelocity = 5;
    if (has_angularvelocity()) {
      total_size += 1 + 4;
    }

    // optional bool awake = 6;
    if (has_awake()) {
      total_size += 1 + 1;
    }

    // optional bool bullet = 7;
    if (has_bullet()) {
      total_size += 1 + 1;
    }

    // optional bool fixedRotation = 8;
    if (has_fixedrotation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float intertialScale = 9;
    if (has_intertialscale()) {
      total_size += 1 + 4;
    }

    // optional float linearDamping = 10;
    if (has_lineardamping()) {
      total_size += 1 + 4;
    }

    // optional float gravityScale = 11;
    if (has_gravityscale()) {
      total_size += 1 + 4;
    }

    // optional .com.laex.cg2d.model.CGVector2 linearVelocity = 12;
    if (has_linearvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linearvelocity());
    }

    // optional .com.laex.cg2d.model.CGBodyType type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.laex.cg2d.model.CGVector2 position = 14;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBodyDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBodyDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBodyDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBodyDef::MergeFrom(const CGBodyDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_allowsleep()) {
      set_allowsleep(from.allowsleep());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_angulardamping()) {
      set_angulardamping(from.angulardamping());
    }
    if (from.has_angularvelocity()) {
      set_angularvelocity(from.angularvelocity());
    }
    if (from.has_awake()) {
      set_awake(from.awake());
    }
    if (from.has_bullet()) {
      set_bullet(from.bullet());
    }
    if (from.has_fixedrotation()) {
      set_fixedrotation(from.fixedrotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intertialscale()) {
      set_intertialscale(from.intertialscale());
    }
    if (from.has_lineardamping()) {
      set_lineardamping(from.lineardamping());
    }
    if (from.has_gravityscale()) {
      set_gravityscale(from.gravityscale());
    }
    if (from.has_linearvelocity()) {
      mutable_linearvelocity()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.linearvelocity());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::com::laex::cg2d::model::CGVector2::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBodyDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBodyDef::CopyFrom(const CGBodyDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBodyDef::IsInitialized() const {

  if (has_linearvelocity()) {
    if (!this->linearvelocity().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void CGBodyDef::Swap(CGBodyDef* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(allowsleep_, other->allowsleep_);
    std::swap(angle_, other->angle_);
    std::swap(angulardamping_, other->angulardamping_);
    std::swap(angularvelocity_, other->angularvelocity_);
    std::swap(awake_, other->awake_);
    std::swap(bullet_, other->bullet_);
    std::swap(fixedrotation_, other->fixedrotation_);
    std::swap(intertialscale_, other->intertialscale_);
    std::swap(lineardamping_, other->lineardamping_);
    std::swap(gravityscale_, other->gravityscale_);
    std::swap(linearvelocity_, other->linearvelocity_);
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBodyDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBodyDef_descriptor_;
  metadata.reflection = CGBodyDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFilter::kCategoryBitsFieldNumber;
const int CGFilter::kMaskBitsFieldNumber;
const int CGFilter::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

CGFilter::CGFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGFilter::InitAsDefaultInstance() {
}

CGFilter::CGFilter(const CGFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGFilter::SharedCtor() {
  _cached_size_ = 0;
  categorybits_ = 0;
  maskbits_ = 0;
  groupindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFilter::~CGFilter() {
  SharedDtor();
}

void CGFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFilter_descriptor_;
}

const CGFilter& CGFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGFilter* CGFilter::default_instance_ = NULL;

CGFilter* CGFilter::New() const {
  return new CGFilter;
}

void CGFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    categorybits_ = 0;
    maskbits_ = 0;
    groupindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 categoryBits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &categorybits_)));
          set_has_categorybits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maskBits;
        break;
      }

      // optional int32 maskBits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maskBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maskbits_)));
          set_has_maskbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupIndex;
        break;
      }

      // optional int32 groupIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 categoryBits = 1;
  if (has_categorybits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->categorybits(), output);
  }

  // optional int32 maskBits = 2;
  if (has_maskbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maskbits(), output);
  }

  // optional int32 groupIndex = 3;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 categoryBits = 1;
  if (has_categorybits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->categorybits(), target);
  }

  // optional int32 maskBits = 2;
  if (has_maskbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maskbits(), target);
  }

  // optional int32 groupIndex = 3;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 categoryBits = 1;
    if (has_categorybits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->categorybits());
    }

    // optional int32 maskBits = 2;
    if (has_maskbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maskbits());
    }

    // optional int32 groupIndex = 3;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFilter::MergeFrom(const CGFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_categorybits()) {
      set_categorybits(from.categorybits());
    }
    if (from.has_maskbits()) {
      set_maskbits(from.maskbits());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFilter::CopyFrom(const CGFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFilter::IsInitialized() const {

  return true;
}

void CGFilter::Swap(CGFilter* other) {
  if (other != this) {
    std::swap(categorybits_, other->categorybits_);
    std::swap(maskbits_, other->maskbits_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFilter_descriptor_;
  metadata.reflection = CGFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFixtureDef::kDensityFieldNumber;
const int CGFixtureDef::kFrictionFieldNumber;
const int CGFixtureDef::kRestitutionFieldNumber;
const int CGFixtureDef::kSensorFieldNumber;
const int CGFixtureDef::kFilterFieldNumber;
#endif  // !_MSC_VER

CGFixtureDef::CGFixtureDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGFixtureDef::InitAsDefaultInstance() {
  filter_ = const_cast< ::com::laex::cg2d::model::CGFilter*>(&::com::laex::cg2d::model::CGFilter::default_instance());
}

CGFixtureDef::CGFixtureDef(const CGFixtureDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGFixtureDef::SharedCtor() {
  _cached_size_ = 0;
  density_ = 0;
  friction_ = 0;
  restitution_ = 0;
  sensor_ = false;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFixtureDef::~CGFixtureDef() {
  SharedDtor();
}

void CGFixtureDef::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void CGFixtureDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFixtureDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFixtureDef_descriptor_;
}

const CGFixtureDef& CGFixtureDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGFixtureDef* CGFixtureDef::default_instance_ = NULL;

CGFixtureDef* CGFixtureDef::New() const {
  return new CGFixtureDef;
}

void CGFixtureDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    density_ = 0;
    friction_ = 0;
    restitution_ = 0;
    sensor_ = false;
    if (has_filter()) {
      if (filter_ != NULL) filter_->::com::laex::cg2d::model::CGFilter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFixtureDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float density = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_friction;
        break;
      }

      // optional float friction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_friction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &friction_)));
          set_has_friction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_restitution;
        break;
      }

      // optional float restitution = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_restitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restitution_)));
          set_has_restitution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sensor;
        break;
      }

      // optional bool sensor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_)));
          set_has_sensor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filter;
        break;
      }

      // optional .com.laex.cg2d.model.CGFilter filter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGFixtureDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float density = 1;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->density(), output);
  }

  // optional float friction = 2;
  if (has_friction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->friction(), output);
  }

  // optional float restitution = 3;
  if (has_restitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->restitution(), output);
  }

  // optional bool sensor = 4;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sensor(), output);
  }

  // optional .com.laex.cg2d.model.CGFilter filter = 5;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGFixtureDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float density = 1;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->density(), target);
  }

  // optional float friction = 2;
  if (has_friction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->friction(), target);
  }

  // optional float restitution = 3;
  if (has_restitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->restitution(), target);
  }

  // optional bool sensor = 4;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sensor(), target);
  }

  // optional .com.laex.cg2d.model.CGFilter filter = 5;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGFixtureDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float density = 1;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // optional float friction = 2;
    if (has_friction()) {
      total_size += 1 + 4;
    }

    // optional float restitution = 3;
    if (has_restitution()) {
      total_size += 1 + 4;
    }

    // optional bool sensor = 4;
    if (has_sensor()) {
      total_size += 1 + 1;
    }

    // optional .com.laex.cg2d.model.CGFilter filter = 5;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFixtureDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFixtureDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFixtureDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFixtureDef::MergeFrom(const CGFixtureDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_friction()) {
      set_friction(from.friction());
    }
    if (from.has_restitution()) {
      set_restitution(from.restitution());
    }
    if (from.has_sensor()) {
      set_sensor(from.sensor());
    }
    if (from.has_filter()) {
      mutable_filter()->::com::laex::cg2d::model::CGFilter::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFixtureDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFixtureDef::CopyFrom(const CGFixtureDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFixtureDef::IsInitialized() const {

  return true;
}

void CGFixtureDef::Swap(CGFixtureDef* other) {
  if (other != this) {
    std::swap(density_, other->density_);
    std::swap(friction_, other->friction_);
    std::swap(restitution_, other->restitution_);
    std::swap(sensor_, other->sensor_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFixtureDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFixtureDef_descriptor_;
  metadata.reflection = CGFixtureDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGShape::kIdFieldNumber;
const int CGShape::kVisibleFieldNumber;
const int CGShape::kLockedFieldNumber;
const int CGShape::kBackgroundFieldNumber;
const int CGShape::kBackgroundResourceFileFieldNumber;
const int CGShape::kEditorShapeTypeFieldNumber;
const int CGShape::kBoundsFieldNumber;
const int CGShape::kBodyDefFieldNumber;
const int CGShape::kFixtureDefFieldNumber;
const int CGShape::kJointsFieldNumber;
const int CGShape::kEntityRefFileFieldNumber;
#endif  // !_MSC_VER

CGShape::CGShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGShape::InitAsDefaultInstance() {
  backgroundresourcefile_ = const_cast< ::com::laex::cg2d::model::CGResourceFile*>(&::com::laex::cg2d::model::CGResourceFile::default_instance());
  bounds_ = const_cast< ::com::laex::cg2d::model::CGBounds*>(&::com::laex::cg2d::model::CGBounds::default_instance());
  bodydef_ = const_cast< ::com::laex::cg2d::model::CGBodyDef*>(&::com::laex::cg2d::model::CGBodyDef::default_instance());
  fixturedef_ = const_cast< ::com::laex::cg2d::model::CGFixtureDef*>(&::com::laex::cg2d::model::CGFixtureDef::default_instance());
  entityreffile_ = const_cast< ::com::laex::cg2d::model::CGResourceFile*>(&::com::laex::cg2d::model::CGResourceFile::default_instance());
}

CGShape::CGShape(const CGShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGShape::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visible_ = false;
  locked_ = false;
  background_ = false;
  backgroundresourcefile_ = NULL;
  editorshapetype_ = 1;
  bounds_ = NULL;
  bodydef_ = NULL;
  fixturedef_ = NULL;
  entityreffile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGShape::~CGShape() {
  SharedDtor();
}

void CGShape::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete backgroundresourcefile_;
    delete bounds_;
    delete bodydef_;
    delete fixturedef_;
    delete entityreffile_;
  }
}

void CGShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGShape_descriptor_;
}

const CGShape& CGShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGShape* CGShape::default_instance_ = NULL;

CGShape* CGShape::New() const {
  return new CGShape;
}

void CGShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    visible_ = false;
    locked_ = false;
    background_ = false;
    if (has_backgroundresourcefile()) {
      if (backgroundresourcefile_ != NULL) backgroundresourcefile_->::com::laex::cg2d::model::CGResourceFile::Clear();
    }
    editorshapetype_ = 1;
    if (has_bounds()) {
      if (bounds_ != NULL) bounds_->::com::laex::cg2d::model::CGBounds::Clear();
    }
    if (has_bodydef()) {
      if (bodydef_ != NULL) bodydef_->::com::laex::cg2d::model::CGBodyDef::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fixturedef()) {
      if (fixturedef_ != NULL) fixturedef_->::com::laex::cg2d::model::CGFixtureDef::Clear();
    }
    if (has_entityreffile()) {
      if (entityreffile_ != NULL) entityreffile_->::com::laex::cg2d::model::CGResourceFile::Clear();
    }
  }
  joints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_visible;
        break;
      }

      // optional bool visible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_locked;
        break;
      }

      // optional bool locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_background;
        break;
      }

      // optional bool background = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_backgroundResourceFile;
        break;
      }

      // optional .com.laex.cg2d.model.CGResourceFile backgroundResourceFile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backgroundResourceFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundresourcefile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_editorShapeType;
        break;
      }

      // optional .com.laex.cg2d.model.CGEditorShapeType editorShapeType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_editorShapeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::laex::cg2d::model::CGEditorShapeType_IsValid(value)) {
            set_editorshapetype(static_cast< ::com::laex::cg2d::model::CGEditorShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bounds;
        break;
      }

      // optional .com.laex.cg2d.model.CGBounds bounds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bodyDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGBodyDef bodyDef = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodydef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fixtureDef;
        break;
      }

      // optional .com.laex.cg2d.model.CGFixtureDef fixtureDef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixtureDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixturedef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_joints;
        break;
      }

      // repeated .com.laex.cg2d.model.CGJoint joints = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_joints;
        if (input->ExpectTag(90)) goto parse_entityRefFile;
        break;
      }

      // optional .com.laex.cg2d.model.CGResourceFile entityRefFile = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entityRefFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entityreffile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  // optional bool locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->locked(), output);
  }

  // optional bool background = 4;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->background(), output);
  }

  // optional .com.laex.cg2d.model.CGResourceFile backgroundResourceFile = 5;
  if (has_backgroundresourcefile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->backgroundresourcefile(), output);
  }

  // optional .com.laex.cg2d.model.CGEditorShapeType editorShapeType = 6;
  if (has_editorshapetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->editorshapetype(), output);
  }

  // optional .com.laex.cg2d.model.CGBounds bounds = 7;
  if (has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bounds(), output);
  }

  // optional .com.laex.cg2d.model.CGBodyDef bodyDef = 8;
  if (has_bodydef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bodydef(), output);
  }

  // optional .com.laex.cg2d.model.CGFixtureDef fixtureDef = 9;
  if (has_fixturedef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fixturedef(), output);
  }

  // repeated .com.laex.cg2d.model.CGJoint joints = 10;
  for (int i = 0; i < this->joints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->joints(i), output);
  }

  // optional .com.laex.cg2d.model.CGResourceFile entityRefFile = 11;
  if (has_entityreffile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->entityreffile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  // optional bool locked = 3;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->locked(), target);
  }

  // optional bool background = 4;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->background(), target);
  }

  // optional .com.laex.cg2d.model.CGResourceFile backgroundResourceFile = 5;
  if (has_backgroundresourcefile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->backgroundresourcefile(), target);
  }

  // optional .com.laex.cg2d.model.CGEditorShapeType editorShapeType = 6;
  if (has_editorshapetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->editorshapetype(), target);
  }

  // optional .com.laex.cg2d.model.CGBounds bounds = 7;
  if (has_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bounds(), target);
  }

  // optional .com.laex.cg2d.model.CGBodyDef bodyDef = 8;
  if (has_bodydef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bodydef(), target);
  }

  // optional .com.laex.cg2d.model.CGFixtureDef fixtureDef = 9;
  if (has_fixturedef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fixturedef(), target);
  }

  // repeated .com.laex.cg2d.model.CGJoint joints = 10;
  for (int i = 0; i < this->joints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->joints(i), target);
  }

  // optional .com.laex.cg2d.model.CGResourceFile entityRefFile = 11;
  if (has_entityreffile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->entityreffile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool visible = 2;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool locked = 3;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional bool background = 4;
    if (has_background()) {
      total_size += 1 + 1;
    }

    // optional .com.laex.cg2d.model.CGResourceFile backgroundResourceFile = 5;
    if (has_backgroundresourcefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundresourcefile());
    }

    // optional .com.laex.cg2d.model.CGEditorShapeType editorShapeType = 6;
    if (has_editorshapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->editorshapetype());
    }

    // optional .com.laex.cg2d.model.CGBounds bounds = 7;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounds());
    }

    // optional .com.laex.cg2d.model.CGBodyDef bodyDef = 8;
    if (has_bodydef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodydef());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.laex.cg2d.model.CGFixtureDef fixtureDef = 9;
    if (has_fixturedef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixturedef());
    }

    // optional .com.laex.cg2d.model.CGResourceFile entityRefFile = 11;
    if (has_entityreffile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entityreffile());
    }

  }
  // repeated .com.laex.cg2d.model.CGJoint joints = 10;
  total_size += 1 * this->joints_size();
  for (int i = 0; i < this->joints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGShape::MergeFrom(const CGShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  joints_.MergeFrom(from.joints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_backgroundresourcefile()) {
      mutable_backgroundresourcefile()->::com::laex::cg2d::model::CGResourceFile::MergeFrom(from.backgroundresourcefile());
    }
    if (from.has_editorshapetype()) {
      set_editorshapetype(from.editorshapetype());
    }
    if (from.has_bounds()) {
      mutable_bounds()->::com::laex::cg2d::model::CGBounds::MergeFrom(from.bounds());
    }
    if (from.has_bodydef()) {
      mutable_bodydef()->::com::laex::cg2d::model::CGBodyDef::MergeFrom(from.bodydef());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fixturedef()) {
      mutable_fixturedef()->::com::laex::cg2d::model::CGFixtureDef::MergeFrom(from.fixturedef());
    }
    if (from.has_entityreffile()) {
      mutable_entityreffile()->::com::laex::cg2d::model::CGResourceFile::MergeFrom(from.entityreffile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGShape::CopyFrom(const CGShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShape::IsInitialized() const {

  if (has_bodydef()) {
    if (!this->bodydef().IsInitialized()) return false;
  }
  for (int i = 0; i < joints_size(); i++) {
    if (!this->joints(i).IsInitialized()) return false;
  }
  return true;
}

void CGShape::Swap(CGShape* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(visible_, other->visible_);
    std::swap(locked_, other->locked_);
    std::swap(background_, other->background_);
    std::swap(backgroundresourcefile_, other->backgroundresourcefile_);
    std::swap(editorshapetype_, other->editorshapetype_);
    std::swap(bounds_, other->bounds_);
    std::swap(bodydef_, other->bodydef_);
    std::swap(fixturedef_, other->fixturedef_);
    joints_.Swap(&other->joints_);
    std::swap(entityreffile_, other->entityreffile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGShape_descriptor_;
  metadata.reflection = CGShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLayer::kIdFieldNumber;
const int CGLayer::kNameFieldNumber;
const int CGLayer::kVisibleFieldNumber;
const int CGLayer::kLockedFieldNumber;
const int CGLayer::kShapeFieldNumber;
#endif  // !_MSC_VER

CGLayer::CGLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGLayer::InitAsDefaultInstance() {
}

CGLayer::CGLayer(const CGLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGLayer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visible_ = false;
  locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLayer::~CGLayer() {
  SharedDtor();
}

void CGLayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CGLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLayer_descriptor_;
}

const CGLayer& CGLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGLayer* CGLayer::default_instance_ = NULL;

CGLayer* CGLayer::New() const {
  return new CGLayer;
}

void CGLayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    visible_ = false;
    locked_ = false;
  }
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_visible;
        break;
      }

      // optional bool visible = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_locked;
        break;
      }

      // optional bool locked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shape;
        break;
      }

      // repeated .com.laex.cg2d.model.CGShape shape = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shape;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bool visible = 3;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->visible(), output);
  }

  // optional bool locked = 4;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->locked(), output);
  }

  // repeated .com.laex.cg2d.model.CGShape shape = 5;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shape(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool visible = 3;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->visible(), target);
  }

  // optional bool locked = 4;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->locked(), target);
  }

  // repeated .com.laex.cg2d.model.CGShape shape = 5;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shape(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool visible = 3;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool locked = 4;
    if (has_locked()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.laex.cg2d.model.CGShape shape = 5;
  total_size += 1 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLayer::MergeFrom(const CGLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLayer::CopyFrom(const CGLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLayer::IsInitialized() const {

  for (int i = 0; i < shape_size(); i++) {
    if (!this->shape(i).IsInitialized()) return false;
  }
  return true;
}

void CGLayer::Swap(CGLayer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(visible_, other->visible_);
    std::swap(locked_, other->locked_);
    shape_.Swap(&other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLayer_descriptor_;
  metadata.reflection = CGLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGScreenPreferences_CGDebugDrawPreferences::kDrawBodiesFieldNumber;
const int CGScreenPreferences_CGDebugDrawPreferences::kDrawJointsFieldNumber;
const int CGScreenPreferences_CGDebugDrawPreferences::kDrawAABBFieldNumber;
const int CGScreenPreferences_CGDebugDrawPreferences::kDrawInactiveBodiesFieldNumber;
const int CGScreenPreferences_CGDebugDrawPreferences::kInstallMouseJointFieldNumber;
const int CGScreenPreferences_CGDebugDrawPreferences::kDrawDebugDataFieldNumber;
const int CGScreenPreferences_CGDebugDrawPreferences::kDrawEntitiesFieldNumber;
#endif  // !_MSC_VER

CGScreenPreferences_CGDebugDrawPreferences::CGScreenPreferences_CGDebugDrawPreferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGScreenPreferences_CGDebugDrawPreferences::InitAsDefaultInstance() {
}

CGScreenPreferences_CGDebugDrawPreferences::CGScreenPreferences_CGDebugDrawPreferences(const CGScreenPreferences_CGDebugDrawPreferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGScreenPreferences_CGDebugDrawPreferences::SharedCtor() {
  _cached_size_ = 0;
  drawbodies_ = false;
  drawjoints_ = false;
  drawaabb_ = false;
  drawinactivebodies_ = false;
  installmousejoint_ = false;
  drawdebugdata_ = false;
  drawentities_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGScreenPreferences_CGDebugDrawPreferences::~CGScreenPreferences_CGDebugDrawPreferences() {
  SharedDtor();
}

void CGScreenPreferences_CGDebugDrawPreferences::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGScreenPreferences_CGDebugDrawPreferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGScreenPreferences_CGDebugDrawPreferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGScreenPreferences_CGDebugDrawPreferences_descriptor_;
}

const CGScreenPreferences_CGDebugDrawPreferences& CGScreenPreferences_CGDebugDrawPreferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGScreenPreferences_CGDebugDrawPreferences* CGScreenPreferences_CGDebugDrawPreferences::default_instance_ = NULL;

CGScreenPreferences_CGDebugDrawPreferences* CGScreenPreferences_CGDebugDrawPreferences::New() const {
  return new CGScreenPreferences_CGDebugDrawPreferences;
}

void CGScreenPreferences_CGDebugDrawPreferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    drawbodies_ = false;
    drawjoints_ = false;
    drawaabb_ = false;
    drawinactivebodies_ = false;
    installmousejoint_ = false;
    drawdebugdata_ = false;
    drawentities_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGScreenPreferences_CGDebugDrawPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool drawBodies = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawbodies_)));
          set_has_drawbodies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawJoints;
        break;
      }

      // optional bool drawJoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawJoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawjoints_)));
          set_has_drawjoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drawAABB;
        break;
      }

      // optional bool drawAABB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawAABB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawaabb_)));
          set_has_drawaabb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drawInactiveBodies;
        break;
      }

      // optional bool drawInactiveBodies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawInactiveBodies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawinactivebodies_)));
          set_has_drawinactivebodies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_installMouseJoint;
        break;
      }

      // optional bool installMouseJoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installMouseJoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installmousejoint_)));
          set_has_installmousejoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_drawDebugData;
        break;
      }

      // optional bool drawDebugData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawDebugData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawdebugdata_)));
          set_has_drawdebugdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_drawEntities;
        break;
      }

      // optional bool drawEntities = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawEntities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawentities_)));
          set_has_drawentities();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGScreenPreferences_CGDebugDrawPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool drawBodies = 1;
  if (has_drawbodies()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->drawbodies(), output);
  }

  // optional bool drawJoints = 2;
  if (has_drawjoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->drawjoints(), output);
  }

  // optional bool drawAABB = 3;
  if (has_drawaabb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->drawaabb(), output);
  }

  // optional bool drawInactiveBodies = 4;
  if (has_drawinactivebodies()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->drawinactivebodies(), output);
  }

  // optional bool installMouseJoint = 5;
  if (has_installmousejoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->installmousejoint(), output);
  }

  // optional bool drawDebugData = 6;
  if (has_drawdebugdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->drawdebugdata(), output);
  }

  // optional bool drawEntities = 7;
  if (has_drawentities()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->drawentities(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGScreenPreferences_CGDebugDrawPreferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool drawBodies = 1;
  if (has_drawbodies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->drawbodies(), target);
  }

  // optional bool drawJoints = 2;
  if (has_drawjoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->drawjoints(), target);
  }

  // optional bool drawAABB = 3;
  if (has_drawaabb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->drawaabb(), target);
  }

  // optional bool drawInactiveBodies = 4;
  if (has_drawinactivebodies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->drawinactivebodies(), target);
  }

  // optional bool installMouseJoint = 5;
  if (has_installmousejoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->installmousejoint(), target);
  }

  // optional bool drawDebugData = 6;
  if (has_drawdebugdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->drawdebugdata(), target);
  }

  // optional bool drawEntities = 7;
  if (has_drawentities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->drawentities(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGScreenPreferences_CGDebugDrawPreferences::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool drawBodies = 1;
    if (has_drawbodies()) {
      total_size += 1 + 1;
    }

    // optional bool drawJoints = 2;
    if (has_drawjoints()) {
      total_size += 1 + 1;
    }

    // optional bool drawAABB = 3;
    if (has_drawaabb()) {
      total_size += 1 + 1;
    }

    // optional bool drawInactiveBodies = 4;
    if (has_drawinactivebodies()) {
      total_size += 1 + 1;
    }

    // optional bool installMouseJoint = 5;
    if (has_installmousejoint()) {
      total_size += 1 + 1;
    }

    // optional bool drawDebugData = 6;
    if (has_drawdebugdata()) {
      total_size += 1 + 1;
    }

    // optional bool drawEntities = 7;
    if (has_drawentities()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGScreenPreferences_CGDebugDrawPreferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGScreenPreferences_CGDebugDrawPreferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGScreenPreferences_CGDebugDrawPreferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGScreenPreferences_CGDebugDrawPreferences::MergeFrom(const CGScreenPreferences_CGDebugDrawPreferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawbodies()) {
      set_drawbodies(from.drawbodies());
    }
    if (from.has_drawjoints()) {
      set_drawjoints(from.drawjoints());
    }
    if (from.has_drawaabb()) {
      set_drawaabb(from.drawaabb());
    }
    if (from.has_drawinactivebodies()) {
      set_drawinactivebodies(from.drawinactivebodies());
    }
    if (from.has_installmousejoint()) {
      set_installmousejoint(from.installmousejoint());
    }
    if (from.has_drawdebugdata()) {
      set_drawdebugdata(from.drawdebugdata());
    }
    if (from.has_drawentities()) {
      set_drawentities(from.drawentities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGScreenPreferences_CGDebugDrawPreferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGScreenPreferences_CGDebugDrawPreferences::CopyFrom(const CGScreenPreferences_CGDebugDrawPreferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScreenPreferences_CGDebugDrawPreferences::IsInitialized() const {

  return true;
}

void CGScreenPreferences_CGDebugDrawPreferences::Swap(CGScreenPreferences_CGDebugDrawPreferences* other) {
  if (other != this) {
    std::swap(drawbodies_, other->drawbodies_);
    std::swap(drawjoints_, other->drawjoints_);
    std::swap(drawaabb_, other->drawaabb_);
    std::swap(drawinactivebodies_, other->drawinactivebodies_);
    std::swap(installmousejoint_, other->installmousejoint_);
    std::swap(drawdebugdata_, other->drawdebugdata_);
    std::swap(drawentities_, other->drawentities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGScreenPreferences_CGDebugDrawPreferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGScreenPreferences_CGDebugDrawPreferences_descriptor_;
  metadata.reflection = CGScreenPreferences_CGDebugDrawPreferences_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGScreenPreferences_CGWorldPreferences::kPtmRatioFieldNumber;
const int CGScreenPreferences_CGWorldPreferences::kVelocityIterationsFieldNumber;
const int CGScreenPreferences_CGWorldPreferences::kPositionIterationsFieldNumber;
const int CGScreenPreferences_CGWorldPreferences::kTimeStepFieldNumber;
const int CGScreenPreferences_CGWorldPreferences::kGravityXFieldNumber;
const int CGScreenPreferences_CGWorldPreferences::kGravityYFieldNumber;
#endif  // !_MSC_VER

CGScreenPreferences_CGWorldPreferences::CGScreenPreferences_CGWorldPreferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGScreenPreferences_CGWorldPreferences::InitAsDefaultInstance() {
}

CGScreenPreferences_CGWorldPreferences::CGScreenPreferences_CGWorldPreferences(const CGScreenPreferences_CGWorldPreferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGScreenPreferences_CGWorldPreferences::SharedCtor() {
  _cached_size_ = 0;
  ptmratio_ = 0;
  velocityiterations_ = 0;
  positioniterations_ = 0;
  timestep_ = 0;
  gravityx_ = 0;
  gravityy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGScreenPreferences_CGWorldPreferences::~CGScreenPreferences_CGWorldPreferences() {
  SharedDtor();
}

void CGScreenPreferences_CGWorldPreferences::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGScreenPreferences_CGWorldPreferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGScreenPreferences_CGWorldPreferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGScreenPreferences_CGWorldPreferences_descriptor_;
}

const CGScreenPreferences_CGWorldPreferences& CGScreenPreferences_CGWorldPreferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGScreenPreferences_CGWorldPreferences* CGScreenPreferences_CGWorldPreferences::default_instance_ = NULL;

CGScreenPreferences_CGWorldPreferences* CGScreenPreferences_CGWorldPreferences::New() const {
  return new CGScreenPreferences_CGWorldPreferences;
}

void CGScreenPreferences_CGWorldPreferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptmratio_ = 0;
    velocityiterations_ = 0;
    positioniterations_ = 0;
    timestep_ = 0;
    gravityx_ = 0;
    gravityy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGScreenPreferences_CGWorldPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ptmRatio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptmratio_)));
          set_has_ptmratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_velocityIterations;
        break;
      }

      // optional int32 velocityIterations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_velocityIterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocityiterations_)));
          set_has_velocityiterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_positionIterations;
        break;
      }

      // optional int32 positionIterations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_positionIterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positioniterations_)));
          set_has_positioniterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_timeStep;
        break;
      }

      // optional float timeStep = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timeStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestep_)));
          set_has_timestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gravityX;
        break;
      }

      // optional float gravityX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gravityX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityx_)));
          set_has_gravityx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_gravityY;
        break;
      }

      // optional float gravityY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gravityY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityy_)));
          set_has_gravityy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGScreenPreferences_CGWorldPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ptmRatio = 1;
  if (has_ptmratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ptmratio(), output);
  }

  // optional int32 velocityIterations = 2;
  if (has_velocityiterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->velocityiterations(), output);
  }

  // optional int32 positionIterations = 3;
  if (has_positioniterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->positioniterations(), output);
  }

  // optional float timeStep = 4;
  if (has_timestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->timestep(), output);
  }

  // optional float gravityX = 5;
  if (has_gravityx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gravityx(), output);
  }

  // optional float gravityY = 6;
  if (has_gravityy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gravityy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGScreenPreferences_CGWorldPreferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ptmRatio = 1;
  if (has_ptmratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ptmratio(), target);
  }

  // optional int32 velocityIterations = 2;
  if (has_velocityiterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->velocityiterations(), target);
  }

  // optional int32 positionIterations = 3;
  if (has_positioniterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->positioniterations(), target);
  }

  // optional float timeStep = 4;
  if (has_timestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->timestep(), target);
  }

  // optional float gravityX = 5;
  if (has_gravityx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gravityx(), target);
  }

  // optional float gravityY = 6;
  if (has_gravityy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gravityy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGScreenPreferences_CGWorldPreferences::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ptmRatio = 1;
    if (has_ptmratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptmratio());
    }

    // optional int32 velocityIterations = 2;
    if (has_velocityiterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocityiterations());
    }

    // optional int32 positionIterations = 3;
    if (has_positioniterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positioniterations());
    }

    // optional float timeStep = 4;
    if (has_timestep()) {
      total_size += 1 + 4;
    }

    // optional float gravityX = 5;
    if (has_gravityx()) {
      total_size += 1 + 4;
    }

    // optional float gravityY = 6;
    if (has_gravityy()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGScreenPreferences_CGWorldPreferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGScreenPreferences_CGWorldPreferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGScreenPreferences_CGWorldPreferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGScreenPreferences_CGWorldPreferences::MergeFrom(const CGScreenPreferences_CGWorldPreferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptmratio()) {
      set_ptmratio(from.ptmratio());
    }
    if (from.has_velocityiterations()) {
      set_velocityiterations(from.velocityiterations());
    }
    if (from.has_positioniterations()) {
      set_positioniterations(from.positioniterations());
    }
    if (from.has_timestep()) {
      set_timestep(from.timestep());
    }
    if (from.has_gravityx()) {
      set_gravityx(from.gravityx());
    }
    if (from.has_gravityy()) {
      set_gravityy(from.gravityy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGScreenPreferences_CGWorldPreferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGScreenPreferences_CGWorldPreferences::CopyFrom(const CGScreenPreferences_CGWorldPreferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScreenPreferences_CGWorldPreferences::IsInitialized() const {

  return true;
}

void CGScreenPreferences_CGWorldPreferences::Swap(CGScreenPreferences_CGWorldPreferences* other) {
  if (other != this) {
    std::swap(ptmratio_, other->ptmratio_);
    std::swap(velocityiterations_, other->velocityiterations_);
    std::swap(positioniterations_, other->positioniterations_);
    std::swap(timestep_, other->timestep_);
    std::swap(gravityx_, other->gravityx_);
    std::swap(gravityy_, other->gravityy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGScreenPreferences_CGWorldPreferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGScreenPreferences_CGWorldPreferences_descriptor_;
  metadata.reflection = CGScreenPreferences_CGWorldPreferences_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGScreenPreferences_CGCardPreferences::kCardNoXFieldNumber;
const int CGScreenPreferences_CGCardPreferences::kCardNoYFieldNumber;
const int CGScreenPreferences_CGCardPreferences::kCardWidthFieldNumber;
const int CGScreenPreferences_CGCardPreferences::kCardHeightFieldNumber;
#endif  // !_MSC_VER

CGScreenPreferences_CGCardPreferences::CGScreenPreferences_CGCardPreferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGScreenPreferences_CGCardPreferences::InitAsDefaultInstance() {
}

CGScreenPreferences_CGCardPreferences::CGScreenPreferences_CGCardPreferences(const CGScreenPreferences_CGCardPreferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGScreenPreferences_CGCardPreferences::SharedCtor() {
  _cached_size_ = 0;
  cardnox_ = 0;
  cardnoy_ = 0;
  cardwidth_ = 0;
  cardheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGScreenPreferences_CGCardPreferences::~CGScreenPreferences_CGCardPreferences() {
  SharedDtor();
}

void CGScreenPreferences_CGCardPreferences::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGScreenPreferences_CGCardPreferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGScreenPreferences_CGCardPreferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGScreenPreferences_CGCardPreferences_descriptor_;
}

const CGScreenPreferences_CGCardPreferences& CGScreenPreferences_CGCardPreferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGScreenPreferences_CGCardPreferences* CGScreenPreferences_CGCardPreferences::default_instance_ = NULL;

CGScreenPreferences_CGCardPreferences* CGScreenPreferences_CGCardPreferences::New() const {
  return new CGScreenPreferences_CGCardPreferences;
}

void CGScreenPreferences_CGCardPreferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardnox_ = 0;
    cardnoy_ = 0;
    cardwidth_ = 0;
    cardheight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGScreenPreferences_CGCardPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cardNoX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnox_)));
          set_has_cardnox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardNoY;
        break;
      }

      // optional int32 cardNoY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardNoY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnoy_)));
          set_has_cardnoy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardWidth;
        break;
      }

      // optional int32 cardWidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardwidth_)));
          set_has_cardwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardHeight;
        break;
      }

      // optional int32 cardHeight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardheight_)));
          set_has_cardheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGScreenPreferences_CGCardPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cardNoX = 1;
  if (has_cardnox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardnox(), output);
  }

  // optional int32 cardNoY = 2;
  if (has_cardnoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardnoy(), output);
  }

  // optional int32 cardWidth = 3;
  if (has_cardwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardwidth(), output);
  }

  // optional int32 cardHeight = 4;
  if (has_cardheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardheight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGScreenPreferences_CGCardPreferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cardNoX = 1;
  if (has_cardnox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnox(), target);
  }

  // optional int32 cardNoY = 2;
  if (has_cardnoy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardnoy(), target);
  }

  // optional int32 cardWidth = 3;
  if (has_cardwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardwidth(), target);
  }

  // optional int32 cardHeight = 4;
  if (has_cardheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardheight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGScreenPreferences_CGCardPreferences::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cardNoX = 1;
    if (has_cardnox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnox());
    }

    // optional int32 cardNoY = 2;
    if (has_cardnoy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnoy());
    }

    // optional int32 cardWidth = 3;
    if (has_cardwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardwidth());
    }

    // optional int32 cardHeight = 4;
    if (has_cardheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardheight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGScreenPreferences_CGCardPreferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGScreenPreferences_CGCardPreferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGScreenPreferences_CGCardPreferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGScreenPreferences_CGCardPreferences::MergeFrom(const CGScreenPreferences_CGCardPreferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardnox()) {
      set_cardnox(from.cardnox());
    }
    if (from.has_cardnoy()) {
      set_cardnoy(from.cardnoy());
    }
    if (from.has_cardwidth()) {
      set_cardwidth(from.cardwidth());
    }
    if (from.has_cardheight()) {
      set_cardheight(from.cardheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGScreenPreferences_CGCardPreferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGScreenPreferences_CGCardPreferences::CopyFrom(const CGScreenPreferences_CGCardPreferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScreenPreferences_CGCardPreferences::IsInitialized() const {

  return true;
}

void CGScreenPreferences_CGCardPreferences::Swap(CGScreenPreferences_CGCardPreferences* other) {
  if (other != this) {
    std::swap(cardnox_, other->cardnox_);
    std::swap(cardnoy_, other->cardnoy_);
    std::swap(cardwidth_, other->cardwidth_);
    std::swap(cardheight_, other->cardheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGScreenPreferences_CGCardPreferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGScreenPreferences_CGCardPreferences_descriptor_;
  metadata.reflection = CGScreenPreferences_CGCardPreferences_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGScreenPreferences::kDebugDrawPrefsFieldNumber;
const int CGScreenPreferences::kWorldPrefsFieldNumber;
const int CGScreenPreferences::kCardPrefsFieldNumber;
const int CGScreenPreferences::kBackgroundColorFieldNumber;
#endif  // !_MSC_VER

CGScreenPreferences::CGScreenPreferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGScreenPreferences::InitAsDefaultInstance() {
  debugdrawprefs_ = const_cast< ::com::laex::cg2d::model::CGScreenPreferences_CGDebugDrawPreferences*>(&::com::laex::cg2d::model::CGScreenPreferences_CGDebugDrawPreferences::default_instance());
  worldprefs_ = const_cast< ::com::laex::cg2d::model::CGScreenPreferences_CGWorldPreferences*>(&::com::laex::cg2d::model::CGScreenPreferences_CGWorldPreferences::default_instance());
  cardprefs_ = const_cast< ::com::laex::cg2d::model::CGScreenPreferences_CGCardPreferences*>(&::com::laex::cg2d::model::CGScreenPreferences_CGCardPreferences::default_instance());
  backgroundcolor_ = const_cast< ::com::laex::cg2d::model::CGColor*>(&::com::laex::cg2d::model::CGColor::default_instance());
}

CGScreenPreferences::CGScreenPreferences(const CGScreenPreferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGScreenPreferences::SharedCtor() {
  _cached_size_ = 0;
  debugdrawprefs_ = NULL;
  worldprefs_ = NULL;
  cardprefs_ = NULL;
  backgroundcolor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGScreenPreferences::~CGScreenPreferences() {
  SharedDtor();
}

void CGScreenPreferences::SharedDtor() {
  if (this != default_instance_) {
    delete debugdrawprefs_;
    delete worldprefs_;
    delete cardprefs_;
    delete backgroundcolor_;
  }
}

void CGScreenPreferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGScreenPreferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGScreenPreferences_descriptor_;
}

const CGScreenPreferences& CGScreenPreferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fScreenModel_2eproto();
  return *default_instance_;
}

CGScreenPreferences* CGScreenPreferences::default_instance_ = NULL;

CGScreenPreferences* CGScreenPreferences::New() const {
  return new CGScreenPreferences;
}

void CGScreenPreferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debugdrawprefs()) {
      if (debugdrawprefs_ != NULL) debugdrawprefs_->::com::laex::cg2d::model::CGScreenPreferences_CGDebugDrawPreferences::Clear();
    }
    if (has_worldprefs()) {
      if (worldprefs_ != NULL) worldprefs_->::com::laex::cg2d::model::CGScreenPreferences_CGWorldPreferences::Clear();
    }
    if (has_cardprefs()) {
      if (cardprefs_ != NULL) cardprefs_->::com::laex::cg2d::model::CGScreenPreferences_CGCardPreferences::Clear();
    }
    if (has_backgroundcolor()) {
      if (backgroundcolor_ != NULL) backgroundcolor_->::com::laex::cg2d::model::CGColor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGScreenPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.laex.cg2d.model.CGScreenPreferences.CGDebugDrawPreferences debugDrawPrefs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debugdrawprefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_worldPrefs;
        break;
      }

      // optional .com.laex.cg2d.model.CGScreenPreferences.CGWorldPreferences worldPrefs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldPrefs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldprefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardPrefs;
        break;
      }

      // optional .com.laex.cg2d.model.CGScreenPreferences.CGCardPreferences cardPrefs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardPrefs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardprefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backgroundColor;
        break;
      }

      // optional .com.laex.cg2d.model.CGColor backgroundColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundcolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGScreenPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.laex.cg2d.model.CGScreenPreferences.CGDebugDrawPreferences debugDrawPrefs = 1;
  if (has_debugdrawprefs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->debugdrawprefs(), output);
  }

  // optional .com.laex.cg2d.model.CGScreenPreferences.CGWorldPreferences worldPrefs = 2;
  if (has_worldprefs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->worldprefs(), output);
  }

  // optional .com.laex.cg2d.model.CGScreenPreferences.CGCardPreferences cardPrefs = 3;
  if (has_cardprefs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cardprefs(), output);
  }

  // optional .com.laex.cg2d.model.CGColor backgroundColor = 4;
  if (has_backgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->backgroundcolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGScreenPreferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.laex.cg2d.model.CGScreenPreferences.CGDebugDrawPreferences debugDrawPrefs = 1;
  if (has_debugdrawprefs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->debugdrawprefs(), target);
  }

  // optional .com.laex.cg2d.model.CGScreenPreferences.CGWorldPreferences worldPrefs = 2;
  if (has_worldprefs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->worldprefs(), target);
  }

  // optional .com.laex.cg2d.model.CGScreenPreferences.CGCardPreferences cardPrefs = 3;
  if (has_cardprefs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cardprefs(), target);
  }

  // optional .com.laex.cg2d.model.CGColor backgroundColor = 4;
  if (has_backgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->backgroundcolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGScreenPreferences::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.laex.cg2d.model.CGScreenPreferences.CGDebugDrawPreferences debugDrawPrefs = 1;
    if (has_debugdrawprefs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debugdrawprefs());
    }

    // optional .com.laex.cg2d.model.CGScreenPreferences.CGWorldPreferences worldPrefs = 2;
    if (has_worldprefs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldprefs());
    }

    // optional .com.laex.cg2d.model.CGScreenPreferences.CGCardPreferences cardPrefs = 3;
    if (has_cardprefs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardprefs());
    }

    // optional .com.laex.cg2d.model.CGColor backgroundColor = 4;
    if (has_backgroundcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundcolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGScreenPreferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGScreenPreferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGScreenPreferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGScreenPreferences::MergeFrom(const CGScreenPreferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debugdrawprefs()) {
      mutable_debugdrawprefs()->::com::laex::cg2d::model::CGScreenPreferences_CGDebugDrawPreferences::MergeFrom(from.debugdrawprefs());
    }
    if (from.has_worldprefs()) {
      mutable_worldprefs()->::com::laex::cg2d::model::CGScreenPreferences_CGWorldPreferences::MergeFrom(from.worldprefs());
    }
    if (from.has_cardprefs()) {
      mutable_cardprefs()->::com::laex::cg2d::model::CGScreenPreferences_CGCardPreferences::MergeFrom(from.cardprefs());
    }
    if (from.has_backgroundcolor()) {
      mutable_backgroundcolor()->::com::laex::cg2d::model::CGColor::MergeFrom(from.backgroundcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGScreenPreferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGScreenPreferences::CopyFrom(const CGScreenPreferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScreenPreferences::IsInitialized() const {

  if (has_backgroundcolor()) {
    if (!this->backgroundcolor().IsInitialized()) return false;
  }
  return true;
}

void CGScreenPreferences::Swap(CGScreenPreferences* other) {
  if (other != this) {
    std::swap(debugdrawprefs_, other->debugdrawprefs_);
    std::swap(worldprefs_, other->worldprefs_);
    std::swap(cardprefs_, other->cardprefs_);
    std::swap(backgroundcolor_, other->backgroundcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGScreenPreferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGScreenPreferences_descriptor_;
  metadata.reflection = CGScreenPreferences_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace cg2d
}  // namespace laex
}  // namespace com

// @@protoc_insertion_point(global_scope)
